{
  "name": "sylang",
  "displayName": "Sylang",
  "description": "IDE Support for Sylang - Systems and Safety Engineering Language. Complete MBSE (Model Based Systems Engineering) toolkit for complex systems in Automotive, Aerospace, and Medical industries with syntax highlighting, validation, cross-file navigation, and safety standards compliance.",
  "version": "3.0.1",
  "publisher": "balaji-embedcentrum",
  "repository": {
    "type": "git",
    "url": "https://github.com/balaji-embedcentrum/sylang.git"
  },
  "homepage": "https://github.com/balaji-embedcentrum/sylang",
  "bugs": {
    "url": "https://github.com/balaji-embedcentrum/sylang/issues"
  },
  "license": "MIT",
  "engines": {
    "vscode": "^1.74.0"
  },
  "categories": [
    "Programming Languages",
    "Linters",
    "Snippets",
    "Other"
  ],
  "keywords": [
    "sylang",
    "systems-engineering",
    "safety-engineering",
    "mbse",
    "model-based-systems-engineering",
    "automotive",
    "aerospace",
    "medical",
    "safety-standards",
    "functional-safety",
    "asil",
    "iso-26262",
    "do-178c",
    "iec-62304",
    "language-server",
    "dsl",
    "requirements",
    "hazard-analysis",
    "cybersecurity"
  ],
  "galleryBanner": {
    "color": "#1e1e1e",
    "theme": "dark"
  },
  "icon": "icon.png",
  "main": "./out/extension-minimal.js",
  "contributes": {
    "languages": [
      {
        "id": "sylang-productline",
        "aliases": [
          "Sylang ProductLine",
          "sylang-ple"
        ],
        "extensions": [
          ".ple"
        ],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "sylang-functions",
        "aliases": [
          "Sylang Functions",
          "sylang-fun"
        ],
        "extensions": [
          ".fun"
        ],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "sylang-failuremodeanalysis",
        "aliases": [
          "Sylang Failure Mode Analysis",
          "sylang-fma"
        ],
        "extensions": [
          ".fma"
        ],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "sylang-failuremodecontrols",
        "aliases": [
          "Sylang Failure Mode Controls",
          "sylang-fmc"
        ],
        "extensions": [
          ".fmc"
        ],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "sylang-faulttreeanalysis",
        "aliases": [
          "Sylang Fault Tree Analysis",
          "sylang-fta"
        ],
        "extensions": [
          ".fta"
        ],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "sylang-features",
        "aliases": [
          "Sylang Features",
          "sylang-fml"
        ],
        "extensions": [
          ".fml"
        ],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "sylang-variantmodel",
        "aliases": [
          "Sylang Variant Model",
          "sylang-vml"
        ],
        "extensions": [
          ".vml"
        ],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "sylang-variantconfig",
        "aliases": [
          "Sylang Variant Config",
          "sylang-vcf"
        ],
        "extensions": [
          ".vcf"
        ],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "sylang-safety",
        "aliases": [
          "Sylang Safety",
          "sylang-haz"
        ],
        "extensions": [
          ".itm",
          ".sgl",
          ".haz"
        ],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "sylang-risk",
        "aliases": [
          "Sylang Risk Assessment",
          "sylang-rsk"
        ],
        "extensions": [
          ".rsk"
        ],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "sylang-components",
        "aliases": [
          "Sylang Components",
          "sylang-req"
        ],
        "extensions": [
          ".req"
        ],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "sylang-blocks",
        "aliases": [
          "Sylang Blocks",
          "sylang-blk"
        ],
        "extensions": [
          ".blk"
        ],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "sylang-test",
        "aliases": [
          "Sylang Test",
          "sylang-tst"
        ],
        "extensions": [
          ".tst"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "sylang-productline",
        "scopeName": "source.sylang.productline",
        "path": "./syntaxes/sylang-productline.tmGrammar.json"
      },
      {
        "language": "sylang-functions",
        "scopeName": "source.sylang.functions",
        "path": "./syntaxes/sylang-functions.tmGrammar.json"
      },
      {
        "language": "sylang-failuremodeanalysis",
        "scopeName": "source.sylang.failuremodeanalysis",
        "path": "./syntaxes/sylang-failuremodeanalysis.tmGrammar.json"
      },
      {
        "language": "sylang-failuremodecontrols",
        "scopeName": "source.sylang.failuremodecontrols",
        "path": "./syntaxes/sylang-failuremodecontrols.tmGrammar.json"
      },
      {
        "language": "sylang-faulttreeanalysis",
        "scopeName": "source.sylang.faulttreeanalysis",
        "path": "./syntaxes/sylang-faulttreeanalysis.tmGrammar.json"
      },
      {
        "language": "sylang-features",
        "scopeName": "source.sylang.features",
        "path": "./syntaxes/sylang-features.tmGrammar.json"
      },
      {
        "language": "sylang-variantmodel",
        "scopeName": "source.sylang.variantmodel",
        "path": "./syntaxes/sylang-variantmodel.tmGrammar.json"
      },
      {
        "language": "sylang-variantconfig",
        "scopeName": "source.sylang.variantconfig", 
        "path": "./syntaxes/sylang-variantconfig.tmGrammar.json"
      },
      {
        "language": "sylang-safety",
        "scopeName": "source.sylang.safety",
        "path": "./syntaxes/sylang-safety.tmGrammar.json"
      },
      {
        "language": "sylang-risk",
        "scopeName": "source.sylang.risk",
        "path": "./syntaxes/sylang-risk.tmGrammar.json"
      },
      {
        "language": "sylang-components",
        "scopeName": "source.sylang.components",
        "path": "./syntaxes/sylang-components.tmGrammar.json"
      },
      {
        "language": "sylang-blocks",
        "scopeName": "source.sylang.blocks",
        "path": "./syntaxes/sylang-blocks.tmGrammar.json"
      },
      {
        "language": "sylang-test",
        "scopeName": "source.sylang.test",
        "path": "./syntaxes/sylang-test.tmGrammar.json"
      }
    ],
    "snippets": [
      {
        "language": "sylang-productline",
        "path": "./snippets/productline.json"
      },
      {
        "language": "sylang-functions",
        "path": "./snippets/functions.json"
      },
      {
        "language": "sylang-failuremodeanalysis",
        "path": "./snippets/failuremodeanalysis.json"
      },
      {
        "language": "sylang-failuremodecontrols",
        "path": "./snippets/failuremodecontrols.json"
      },
      {
        "language": "sylang-faulttreeanalysis",
        "path": "./snippets/faulttreeanalysis.json"
      },
      {
        "language": "sylang-features",
        "path": "./snippets/features.json"
      },
      {
        "language": "sylang-variantmodel",
        "path": "./snippets/variantmodel.json"
      },
      {
        "language": "sylang-variantconfig",
        "path": "./snippets/variantconfig.json"
      },
      {
        "language": "sylang-risk",
        "path": "./snippets/safety.json"
      },
      {
        "language": "sylang-safety",
        "path": "./snippets/safety.json"
      },
      {
        "language": "sylang-components",
        "path": "./snippets/components.json"
      },
      {
        "language": "sylang-blocks",
        "path": "./snippets/blocks.json"
      },
      {
        "language": "sylang-test",
        "path": "./snippets/test.json"
      }
    ],
    "commands": [
      {
        "command": "sylang.validateWorkspace",
        "title": "Validate Workspace",
        "category": "Sylang"
      },
      {
        "command": "sylang.refreshSymbols",
        "title": "Refresh Symbols",
        "category": "Sylang"
      },
      {
        "command": "sylang.generateVariantConfig",
        "title": "ðŸ”§ Generate Variant Config (.vcf)",
        "category": "Sylang"
      },
      {
        "command": "sylang.createRules",
        "title": "ðŸ¤– Create Sylang Rules",
        "category": "Sylang",
        "icon": "$(file-code)"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "command": "sylang.generateVariantConfig",
          "when": "resourceExtname == .vml",
          "group": "sylang@1"
        }
      ]
    },
    "configuration": {
      "title": "Sylang Language Support",
      "properties": {
        "sylang.lsp.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable Sylang Language Server Protocol"
        },
        "sylang.validation.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable real-time validation"
        },
        "sylang.treeSitter.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Use Tree-sitter for syntax highlighting"
        }
      }
    }
  },
  "activationEvents": [
    "onLanguage:sylang-productline",
    "onLanguage:sylang-functions",
    "onLanguage:sylang-features",
    "onLanguage:sylang-variantmodel",
    "onLanguage:sylang-safety",
    "onLanguage:sylang-security",
    "onLanguage:sylang-components",
    "onLanguage:sylang-variantconfig"
  ],
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/vscode": "^1.74.0",
    "@types/node": "16.x",
    "@typescript-eslint/eslint-plugin": "^5.45.0",
    "@typescript-eslint/parser": "^5.45.0",
    "eslint": "^8.28.0",
    "typescript": "^4.9.4"
  }
}
