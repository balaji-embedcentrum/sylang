# AGENTIC AI INSTRUCTIONS FOR SYLANG AUTOMOTIVE MBSE
# Intelligent Agent Specification for Complete Project Generation
# Version 2.0.0 - July 2025

## CORE AI MISSION
Transform simple user requests into complete, ISO 26262-compliant automotive MBSE projects with full traceability, safety analysis, and component engineering artifacts.

# ================================================================
# SECTION 1: USER INTENT RECOGNITION & BEHAVIORAL PATTERNS
# ================================================================

## 1.1 INTENT CLASSIFICATION SYSTEM

### PROJECT CREATION INTENTS
**Pattern**: "Create artifacts for [SYSTEM_TYPE]"
**Examples**:
- "Create artifacts for automotive EPB system" → FULL_PROJECT_GENERATION
- "Generate complete inverter system" → FULL_PROJECT_GENERATION  
- "Build HVAC control system artifacts" → FULL_PROJECT_GENERATION

**AI Action**: Generate complete project structure with all engineering disciplines

### FEATURE ADDITION INTENTS  
**Pattern**: "Add [FEATURE] to [EXISTING_PROJECT]"
**Examples**:
- "Add regenerative braking feature to inverter project" → INCREMENTAL_FEATURE_ADDITION
- "Add emergency mode to EPB system" → INCREMENTAL_FEATURE_ADDITION
- "Include thermal protection in motor control" → INCREMENTAL_FEATURE_ADDITION

**AI Action**: Analyze existing project, update .fml, propagate through all dependent files

### COMPLIANCE ENHANCEMENT INTENTS
**Pattern**: "Make [PROJECT] [STANDARD] compliant"
**Examples**:
- "Make EPB system ASIL-D compliant" → SAFETY_LEVEL_UPGRADE
- "Add ISO 26262 compliance to steering" → COMPLIANCE_ENHANCEMENT
- "Implement functional safety for braking" → SAFETY_ENGINEERING_FOCUS

**AI Action**: Upgrade safety levels, add redundancy, enhance verification artifacts

### REQUIREMENTS GENERATION INTENTS
**Pattern**: "Create requirements for [SUBSYSTEM/COMPONENT]"
**Examples**:
- "Create requirements for PowerSubsystem" → CONTEXT_AWARE_REQUIREMENTS
- "Generate brake actuator requirements" → COMPONENT_REQUIREMENTS
- "Add safety requirements for motor control" → SAFETY_REQUIREMENTS_FOCUS

**AI Action**: Read ALL context files, generate EARS-format requirements with full traceability

### SYSTEM MODIFICATION INTENTS
**Pattern**: "Update [EXISTING_SYSTEM] with [CHANGES]"
**Examples**:
- "Update EPB system with new actuator type" → INCREMENTAL_SYSTEM_MODIFICATION
- "Modify inverter for different power rating" → SYSTEM_PARAMETER_CHANGE
- "Enhance thermal management" → SUBSYSTEM_ENHANCEMENT

**AI Action**: Analyze existing project, update .fml, propagate through all dependent files

# ================================================================
# SECTION 1.5: AUTOMOTIVE SYSTEM TYPE RECOGNITION
# ================================================================

## 1.5 AUTOMOTIVE SYSTEM TEMPLATES

### EPB (ELECTRIC PARKING BRAKE) SYSTEMS
**Recognition Keywords**: "EPB", "parking brake", "electronic brake", "brake actuator"
**Domain Characteristics**: 
- ASIL-D safety requirements
- Actuator control with position feedback
- Emergency/dynamic braking capability
- Vehicle integration via CAN/LIN
- Thermal management for motor/electronics

**AI Template Pattern**:
- Core Features: ParkingBrake, EmergencyBraking, DiagnosticMonitoring
- Subsystems: ActuatorSubsystem, ControlSubsystem, PowerSubsystem
- Functions: ApplyParkingBrake, ReleaseParkingBrake, EmergencyApply
- Safety Goals: Prevent unintended application/release, ensure emergency capability

### INVERTER SYSTEMS (EV POWERTRAIN)
**Recognition Keywords**: "inverter", "motor drive", "power electronics", "IGBT", "vector control"
**Domain Characteristics**:
- ASIL-D for torque safety, ASIL-C for monitoring
- High-voltage DC to AC conversion
- Motor control algorithms (FOC, SVPWM)
- Thermal management critical
- Regenerative braking capability

**AI Template Pattern**:
- Core Features: PowerConversion, MotorControl, SafetySystems, ThermalManagement
- Subsystems: PowerElectronicsSubsystem, ControlSubsystem, ThermalManagementSubsystem
- Functions: PowerElectronicsController, MotorControlAlgorithmEngine, ThermalManagementSystem
- Safety Goals: Prevent uncontrolled torque, prevent high voltage exposure, prevent thermal hazards

### EPS (ELECTRIC POWER STEERING) SYSTEMS
**Recognition Keywords**: "EPS", "power steering", "steering assist", "torque assist"
**Domain Characteristics**:
- ASIL-D for steering safety
- Torque overlay on manual steering
- Position and torque sensing
- Fail-safe manual reversion
- Speed-dependent assistance

**AI Template Pattern**:
- Core Features: SteeringAssist, TorqueControl, PositionFeedback, ManualReversion
- Subsystems: AssistSubsystem, SensorSubsystem, ControlSubsystem
- Functions: CalculateAssistTorque, MonitorSteeringPosition, ProvideManualReversion
- Safety Goals: Prevent unwanted steering input, ensure manual reversion capability

### BBW (BRAKE-BY-WIRE) SYSTEMS
**Recognition Keywords**: "BBW", "brake by wire", "electronic braking", "brake assist"
**Domain Characteristics**:
- ASIL-D for primary braking
- Hydraulic backup required
- Pedal feel simulation
- ABS/ESC integration
- Redundant control paths

**AI Template Pattern**:
- Core Features: ElectronicBraking, HydraulicBackup, PedalFeel, ABSIntegration
- Subsystems: BrakeActuatorSubsystem, HydraulicSubsystem, ControlSubsystem
- Functions: CalculateBrakeForce, ManageHydraulicBackup, SimulatePedalFeel
- Safety Goals: Ensure braking availability, prevent unintended braking, maintain stopping distance

### HVAC (CLIMATE CONTROL) SYSTEMS
**Recognition Keywords**: "HVAC", "climate", "air conditioning", "heating", "cooling"
**Domain Characteristics**:
- QM to ASIL-B for comfort/defogging
- Thermal management and air distribution
- Energy efficiency optimization
- Cabin air quality monitoring
- User interface integration

**AI Template Pattern**:
- Core Features: TemperatureControl, AirDistribution, AirQuality, EnergyManagement
- Subsystems: CompressorSubsystem, DistributionSubsystem, SensorSubsystem
- Functions: ControlTemperature, ManageAirflow, MonitorAirQuality
- Safety Goals: Prevent windshield fogging, ensure cabin air quality, thermal comfort

### ADAS (ADVANCED DRIVER ASSISTANCE) SYSTEMS
**Recognition Keywords**: "ADAS", "autonomous", "perception", "sensor fusion", "path planning"
**Domain Characteristics**:
- ASIL-B to ASIL-D depending on function
- Multi-sensor fusion (camera, radar, lidar)
- Real-time path planning and control
- Human-machine interface critical
- Cybersecurity requirements

**AI Template Pattern**:
- Core Features: Perception, PathPlanning, VehicleControl, HMInterface
- Subsystems: SensorFusionSubsystem, PlanningSubsystem, ActuationSubsystem
- Functions: ProcessSensorData, PlanTrajectory, ExecuteManeuver
- Safety Goals: Prevent collisions, maintain lane keeping, ensure driver monitoring

# ================================================================
# SECTION 2: COMPREHENSIVE SYNTAX EXAMPLES FOR ALL 15 EXTENSIONS
# ================================================================

## 2.1 COMPLETE SYNTAX EXAMPLES WITH SCALING GUIDANCE

### 1. PRODUCT LINE ENGINEERING (.ple)
**Purpose**: Single product line definition per workspace
**Required**: Exactly ONE .ple file per project
**Note**: Contains comprehensive metadata and compliance information

```sylang
def productline EPBProductLine
  name "Electric Parking Brake Product Line"
  description "Automotive EPB system for passenger vehicles"
  owner "Systems Engineering Team"
  domain "automotive", "safety-critical"
  compliance "ISO 26262", "ASPICE", "ISO 16949"
  firstrelease "2025-03-01"
  tags "EPB", "parking", "brake", "safety"
  safetylevel ASIL-D
  region "Global", "Europe", "North America", "Asia-Pacific"
```

### 2. FEATURE MODELING (.fml)
**Purpose**: Define feature models and variability
**Scaling**: Can contain 10-200+ features as needed for system complexity
**Note**: Add as many features as required - this is just a starting example

```sylang
def featureset EPBFeatures
  def feature ParkingBrake mandatory
    name "Core Parking Brake Function"
    description "Primary parking brake functionality"
    owner "Control Engineering Team"
    tags "parking-brake", "core-function", "safety-critical"
    safetylevel ASIL-C

    def feature ManualApply mandatory
      name "Manual Apply Function"
      description "Driver-initiated brake application"
      owner "Control Engineering Team"
      tags "manual-apply", "driver-control", "actuation"
      safetylevel ASIL-C

    def feature ManualRelease mandatory  
      name "Manual Release Function"
      description "Driver-initiated brake release"
      owner "Control Engineering Team"
      tags "manual-release", "driver-control", "release"
      safetylevel ASIL-C

    def feature AutoRelease optional
      name "Automatic Release Function"
      description "Automatic release on drive engagement"
      owner "Control Engineering Team"
      tags "auto-release", "automatic", "drive-initiation"
      safetylevel ASIL-C

    def feature HillHoldAssist optional
      name "Hill Hold Assist"
      description "Prevents rollback on inclines"
      owner "Control Engineering Team"
      tags "hill-hold", "anti-rollback", "incline"
      safetylevel ASIL-B

  def feature EmergencyBraking mandatory
    name "Emergency Braking Function"
    description "Emergency/dynamic braking capability"
    owner "Safety Engineering Team"
    tags "emergency-braking", "dynamic", "safety-critical"
    safetylevel ASIL-D

    def feature DynamicApply mandatory
      name "Dynamic Emergency Apply"
      description "Emergency braking during vehicle motion"
      owner "Safety Engineering Team"
      tags "dynamic-apply", "emergency", "motion-braking"
      safetylevel ASIL-D

    def feature FailSafeMode mandatory
      name "Fail-Safe Operation"
      description "Safe state operation during system faults"
      owner "Safety Engineering Team"
      tags "fail-safe", "safe-state", "fault-handling"
      safetylevel ASIL-D

  def feature DiagnosticMonitoring mandatory
    name "System Diagnostics"
    description "Continuous system health monitoring"
    owner "Diagnostic Engineering Team"
    tags "diagnostics", "health-monitoring", "fault-detection"
    safetylevel ASIL-C

    def feature FaultDetection mandatory
      name "Fault Detection Function"
      description "Detects system malfunctions"
      owner "Diagnostic Engineering Team"
      tags "fault-detection", "malfunction", "monitoring"
      safetylevel ASIL-C

    def feature StatusReporting mandatory
      name "Status Reporting Function"  
      description "Reports system status to vehicle network"
      owner "Communication Engineering Team"
      tags "status-reporting", "vehicle-network", "communication"
      safetylevel ASIL-B

    def feature PredictiveMaintenance optional
      name "Predictive Maintenance"
      description "Predicts component wear and maintenance needs"
      owner "Diagnostic Engineering Team"
      tags "predictive-maintenance", "wear-prediction", "maintenance"
      safetylevel QM

  def feature ActuatorType mandatory
    name "Actuator Type Selection"
    description "Type of actuator mechanism for brake application"
    owner "Mechanical Engineering Team"
    tags "actuator-type", "mechanism", "selection"
    safetylevel ASIL-D

    def feature ElectricMotor or
      name "Electric Motor Actuator"
      description "Electric motor with gear reduction for brake actuation"
      owner "Mechanical Engineering Team"
      tags "electric-motor", "gear-reduction", "actuation"
      safetylevel ASIL-D

    def feature ElectroMagnetic or
      name "Electromagnetic Actuator"
      description "Electromagnetic actuator for brake application"
      owner "Mechanical Engineering Team"
      tags "electromagnetic", "actuator", "brake-application"
      safetylevel ASIL-D

  def feature CommunicationProtocol mandatory
    name "Communication Protocol"
    description "Vehicle communication protocol support"
    owner "Communication Engineering Team"
    tags "communication-protocol", "vehicle-network", "interface"
    safetylevel ASIL-C

    def feature CANBus or
      name "CAN Bus Interface"
      description "Controller Area Network interface for vehicle communication"
      owner "Communication Engineering Team"
      tags "CAN", "bus-interface", "automotive"
      safetylevel ASIL-C

    def feature CANFDBus or
      name "CAN-FD Bus Interface"
      description "CAN with Flexible Data-rate for high-speed communication"
      owner "Communication Engineering Team"
      tags "CAN-FD", "high-speed", "flexible-data"
      safetylevel ASIL-C

  constraints
    requires ParkingBrake, EmergencyBraking, DiagnosticMonitoring
    requires ManualApply when ParkingBrake
    requires DynamicApply when EmergencyBraking
    requires FaultDetection when DiagnosticMonitoring
    excludes ElectricMotor and ElectroMagnetic
    excludes CANBus and CANFDBus

  // AI NOTE: Add as many features as needed for system complexity
  // Simple systems: 10-50 features, Complex systems: 50-200+ features
  // Each feature should have name, description, owner, tags, and safetylevel
  // Use mandatory/optional for feature availability
  // Use or for mutually exclusive alternatives (exactly one must be selected)
  // Add constraints to define feature relationships and exclusions
```

### 3. FUNCTION DEFINITIONS (.fun)
**Purpose**: Define system functions and their relationships
**Scaling**: Can contain 20-300+ functions depending on system complexity
**Note**: Add as many functions as required - each feature needs implementing functions

```sylang
use featureset EPBFeatures

def functiongroup EPBFunctions
  name "Electric Parking Brake Functions"
  description "Complete function allocation for EPB system"
  owner "Systems Engineering"
  tags "EPB", "functions", "control"
  safetylevel ASIL-D

  def function ApplyParkingBrake
    name "Apply Parking Brake"
    description "Engages parking brake mechanism"
    owner "Control Engineering"
    category "control"
    safetylevel ASIL-C
    enables feature ManualApply
    partof subsystem
    allocatedto ActuatorControlUnit

  def function ReleaseParkingBrake
    name "Release Parking Brake"
    description "Disengages parking brake mechanism"
    owner "Control Engineering"  
    category "control"
    safetylevel ASIL-C
    enables feature ManualRelease
    partof subsystem
    allocatedto ActuatorControlUnit

  def function EmergencyApply
    name "Emergency Apply Function"
    description "Emergency brake application during motion"
    owner "Safety Engineering"
    category "safety"
    safetylevel ASIL-D
    enables feature DynamicApply
    partof subsystem
    allocatedto SafetyControlUnit

  def function MonitorSystemHealth
    name "System Health Monitoring"
    description "Continuous monitoring of EPB system status"
    owner "Diagnostic Engineering"
    category "diagnostic"
    safetylevel ASIL-C
    enables feature FaultDetection
    partof subsystem
    allocatedto DiagnosticModule

  def function CalculateActuatorForce
    name "Calculate Actuator Force"
    description "Determines required actuator force based on vehicle conditions"
    owner "Control Engineering"
    category "control"
    safetylevel ASIL-C
    enables feature ForceCalculation
    partof subsystem
    allocatedto ControlModule

  def function CommunicateVehicleStatus
    name "Communicate Vehicle Status"
    description "Interface with vehicle communication network"
    owner "Communication Engineering"
    category "communication"
    safetylevel ASIL-B
    enables feature StatusReporting
    partof subsystem
    allocatedto CommunicationModule

  def function DetectActuatorPosition
    name "Detect Actuator Position"
    description "Monitor current position of brake actuator"
    owner "Sensor Engineering"
    category "monitoring"
    safetylevel ASIL-C
    enables feature PositionFeedback
    partof subsystem
    allocatedto PositionSensor

  def function ValidateUserInput
    name "Validate User Input"
    description "Verify driver commands and input validity"
    owner "Safety Engineering"
    category "safety"
    safetylevel ASIL-C
    enables feature InputValidation
    partof subsystem
    allocatedto SafetyController

  // AI NOTE: Add as many functions as needed for complete system coverage
  // Typical systems: 20-80 functions, Complex systems: 100-300+ functions
  // Every feature must have at least one implementing function
```

### 4. VARIANT MODEL (.vml)
**Purpose**: Define product variants and configuration selections
**Scaling**: Can contain 10-100+ features depending on product family complexity
**Note**: Add features with appropriate variability (mandatory/optional/alternative) and selection state

```sylang
use featureset EPBFeatures

def variantmodel EPBVariants
  name "EPB Product Variant Model"
  description "Configuration variants for EPB product family"
  owner "Product Line Engineering"
  tags "variants", "configuration", "product-family"
  safetylevel ASIL-D

  # Core System Features (mandatory and selected)
  feature ParkingBrake mandatory selected

    feature ManualApply mandatory selected
    feature ManualRelease mandatory selected
    feature AutoRelease optional selected
    feature HillHoldAssist optional

  feature EmergencyBraking mandatory selected

    feature DynamicApply mandatory selected
    feature FailSafeMode mandatory selected

  feature DiagnosticMonitoring mandatory selected

    feature FaultDetection mandatory selected
    feature StatusReporting mandatory selected
    feature PredictiveMaintenance optional

  # Actuator Type (alternative - exactly one must be selected)
  feature ActuatorType mandatory selected
    feature ElectricMotor alternative selected
    feature ElectroMagnetic alternative
    feature HybridActuator alternative

  # Controller Type (alternative - exactly one must be selected)
  feature ControllerType mandatory selected
    feature BasicController alternative
    feature AdvancedController alternative selected
    feature SafetyController alternative

  # Communication Protocol (alternative - exactly one must be selected)
  feature CommunicationProtocol mandatory selected
    feature CANBus alternative selected
    feature CANFDBus alternative
    feature EthernetBus alternative
    feature LINBus alternative

  # Diagnostic Level (alternative - exactly one must be selected)
  feature DiagnosticLevel mandatory selected
    feature BasicDiagnostics alternative
    feature EnhancedDiagnostics alternative selected
    feature PredictiveDiagnostics alternative

  # Power Management (alternative - exactly one must be selected)
  feature PowerManagement mandatory selected
    feature StandardPower alternative selected
    feature DualVoltage alternative
    feature SmartPower alternative

  # Optional Advanced Features
  feature AdvancedFeatures optional
    feature HillHoldAssist optional selected
    feature AutoRelease optional selected
    feature PredictiveMaintenance optional

  // AI NOTE: Add features for all major configuration decisions
  // Use mandatory/optional for feature availability
  // Use alternative for mutually exclusive options (exactly one must be selected)
  // Use selected to indicate default/current configuration
  // Simple systems: 10-30 features, Complex systems: 30-100+ features
```

### 5. VARIANT CONFIGURATION (.vcf)
**Purpose**: Configuration selections from variant model
**Scaling**: One configuration entry per feature path
**Note**: Only ONE configset per file, auto-generated from .vml selections

```sylang
use variantmodel EPBVariants

def configset EPBStandardConfig
  name "EPB Standard Configuration"
  description "Standard configuration for basic EPB functionality"
  owner "Product Engineering"
  source "EPBVariants"
  generated "2025-01-15T10:30:00.000Z"
  tags "standard", "basic", "cost-optimized"

    def config c_ParkingBrake 1
    def config c_ParkingBrake_ManualApply 1
    def config c_ParkingBrake_ManualRelease 1
    def config c_ParkingBrake_AutoRelease 0
    def config c_ParkingBrake_HillHoldAssist 0
    def config c_EmergencyBraking 1
    def config c_EmergencyBraking_DynamicApply 1
    def config c_EmergencyBraking_FailSafeMode 1
    def config c_DiagnosticMonitoring 1
    def config c_DiagnosticMonitoring_FaultDetection 1
    def config c_DiagnosticMonitoring_StatusReporting 1
    def config c_DiagnosticMonitoring_PredictiveMaintenance 0
    def config c_ActuatorType 1
    def config c_ActuatorType_ElectricMotor 1
    def config c_ActuatorType_ElectroMagnetic 0
    def config c_ActuatorType_HybridActuator 0
    def config c_CommunicationProtocol 1
    def config c_CommunicationProtocol_CANBus 1
    def config c_CommunicationProtocol_CANFDBus 0
    def config c_CommunicationProtocol_EthernetBus 0
    def config c_CommunicationProtocol_LINBus 0
    def config c_AdvancedFeatures 0
    def config c_AdvancedFeatures_HillHoldAssist 0
    def config c_AdvancedFeatures_AutoRelease 0
    def config c_AdvancedFeatures_PredictiveMaintenance 0

// AI NOTE: Only ONE configset per .vcf file
// Each config represents a feature path with 0 (disabled) or 1 (enabled)
// Config names use hierarchical structure with underscores
// Auto-generated from .vml variant model selections
// File should be named {SystemName}VariantConfig.vcf
```

### 6. SAFETY ITEMS (.itm)
**Purpose**: Safety items and operational scenarios (HARA)
**Scaling**: Can contain 5-20+ operational scenarios and vehicle states
**Note**: Define comprehensive operational context for safety analysis

```sylang
use productline EPBProductLine
use featureset EPBFeatures
use functiongroup EPBFunctions

def item EPBSafetyItem
  name "EPB Safety Item Definition"
  description "Item being analyzed for hazard and risk assessment"
  owner "Safety Team"
  reviewers "Safety Engineering", "Systems Engineering"
  productline EPBProductLine
  featureset EPBFeatures
  functiongroup EPBFunctions
  
  block
    ActuatorSubsystem
    ControlSubsystem
    PowerSubsystem
    CommunicationSubsystem
    
  systemboundaries
    includes
      def boundary BOUND_001
        description "EPB actuator mechanism and control electronics"
      def boundary BOUND_002
        description "Position sensors and feedback systems"
      def boundary BOUND_003
        description "Vehicle power supply interface"
    excludes
      def boundary EXCL_001
        description "Vehicle service brake system (separate system)"
      def boundary EXCL_002
        description "Engine management and transmission control"

  operationalscenarios
    def scenario SCEN_001_NormalDriving
      name "Normal Driving Operation"
      description "Vehicle in normal driving mode at various speeds"
      conditions "Vehicle speed 0-200 km/h, normal road conditions"
      duration "Continuous during driving"
      frequency "Every trip"
      
    def scenario SCEN_002_HighwayDriving
      name "Highway Driving"
      description "Vehicle operating at highway speeds"
      conditions "Vehicle speed 80-200 km/h, highway conditions"
      duration "Extended periods during long trips"
      frequency "Regular for highway vehicles"
      
    def scenario SCEN_003_ParkingOnIncline
      name "Parking on Inclined Surface"
      description "Vehicle parked on slope with parking brake engaged"
      conditions "Grade >10%, vehicle stationary, brake applied"
      duration "Extended parking periods"
      frequency "Regular in hilly areas"
      
    def scenario SCEN_004_StartupShutdown
      name "Vehicle Startup and Shutdown"
      description "System initialization and shutdown sequences"
      conditions "Engine start/stop, system power transitions"
      duration "Brief periods during start/stop"
      frequency "Every trip"
      
    def scenario SCEN_005_EmergencyBraking
      name "Emergency Braking Situation"
      description "EPB activated while vehicle is in motion"
      conditions "Vehicle speed >0 km/h, emergency brake activation"
      duration "Brief emergency periods"
      frequency "Rare emergency situations"

  vehiclestates
    def state STATE_001_PARKED
      name "Vehicle Parked"
      description "Vehicle stationary with engine off"
      conditions "Speed = 0, engine off, parking brake engaged"
      
    def state STATE_002_DRIVING
      name "Vehicle Driving" 
      description "Vehicle in motion with engine running"
      conditions "Speed > 0, engine on, parking brake released"
      
    def state STATE_003_STARTUP
      name "Vehicle Starting"
      description "Engine starting sequence"
      conditions "Engine starting, systems initializing"

  // AI NOTE: Add scenarios for all operational contexts where system is active
  // Include normal operation, edge cases, and failure scenarios
  // Typical: 5-15 scenarios, Complex systems: 15-25+ scenarios
```

### 7. HAZARD ANALYSIS (.haz)
**Purpose**: Hazard identification and analysis
**Scaling**: Can contain 10-100+ hazards depending on system complexity
**Note**: Cover all failure modes, environmental conditions, and operational scenarios

```sylang
def hazardidentification EPBHazardAnalysis
  name "EPB System Hazard Analysis"
  description "Comprehensive hazard identification and analysis"
  owner "Safety Engineering"
  methodology "FMEA", "HAZOP", "STPA"
  productline EPBProductLine
  functiongroup EPBFunctions
  
  def hazard H_ACT_001
    name "Actuator Failure to Apply"
    description "Electric actuator fails to engage parking brake"
    category "mechanical"
    cause "Motor failure, gear jamming, power loss, control signal fault"
    effect "Parking brake not applied, vehicle may roll"
    functions_affected ApplyParkingBrake, EmergencyApply
    context "Parking on incline, emergency braking"
    conditions "Vehicle stationary or low speed"
    consequences "Vehicle rollaway, potential collision"

  def hazard H_ACT_002
    name "Actuator Failure to Release"
    description "Electric actuator fails to disengage parking brake"
    category "mechanical"
    cause "Motor failure, gear jamming, position sensor fault"
    effect "Parking brake remains engaged during driving"
    functions_affected ReleaseParkingBrake, DriveAwayRelease
    context "Drive initiation, normal operation"
    conditions "Driver intends to drive"
    consequences "Forced driving with brake engaged, component damage"

  def hazard H_PWR_001
    name "Power Supply Failure"
    description "Loss of electrical power to EPB system"
    category "electrical"
    cause "Fuse failure, wiring fault, battery depletion, alternator failure"
    effect "Complete system shutdown, loss of all functions"
    functions_affected ApplyParkingBrake, ReleaseParkingBrake, MonitorSystemHealth
    context "All operational modes"
    conditions "Normal and emergency operation"
    consequences "System unavailable, manual backup required"

  def hazard H_CTRL_001
    name "Controller Software Fault"
    description "Main controller software experiences fault or corruption"
    category "software"
    cause "Software bug, memory corruption, EMI interference, hardware fault"
    effect "Unpredictable system behavior, loss of control"
    functions_affected ApplyParkingBrake, ReleaseParkingBrake, ValidateUserInput
    context "All operational scenarios"
    conditions "Normal operation, extreme environments"
    consequences "Unintended brake application/release, system malfunction"

  def hazard H_COMM_001
    name "Communication Bus Failure"
    description "Loss of communication with vehicle network"
    category "communication"
    cause "Bus fault, connector failure, EMI interference, protocol error"
    effect "Loss of vehicle status information, isolation from other systems"
    functions_affected CommunicateVehicleStatus, ReceiveVehicleCommands
    context "Integrated vehicle operation"
    conditions "Normal driving, system integration"
    consequences "Degraded functionality, loss of integration features"

  def hazard H_SENS_001
    name "Position Sensor Failure"
    description "Actuator position feedback sensor malfunction"
    category "electrical"
    cause "Sensor failure, wiring fault, calibration drift, contamination"
    effect "Incorrect position feedback, control instability"
    functions_affected DetectActuatorPosition, CalculateActuatorForce
    context "Position-dependent control operations"
    conditions "All brake applications and releases"
    consequences "Inaccurate control, potential partial engagement"

  def hazard H_ENV_001
    name "Extreme Temperature Operation"
    description "System operation outside specified temperature range"
    category "environmental"
    cause "Extreme weather, thermal management failure, component heating"
    effect "Component degradation, performance reduction, failure"
    functions_affected ApplyParkingBrake, ReleaseParkingBrake, MonitorSystemHealth
    context "Extreme environmental conditions"
    conditions "Very hot or cold weather, extended operation"
    consequences "Reduced reliability, potential component failure"

  // AI NOTE: Add hazards for all subsystems and failure modes
  // Typical systems: 10-30 hazards, Complex systems: 50-100+ hazards
  // Cover mechanical, electrical, software, communication, and environmental hazards
```

### 8. RISK ASSESSMENT (.rsk)
**Purpose**: S×E×C methodology and ASIL determination
**Scaling**: One risk assessment per hazard identified in .haz
**Note**: Each hazard requires severity, exposure, controllability analysis

```sylang
use hazardidentification EPBHazardAnalysis

def riskassessment EPBRiskAssessment
  name "EPB System Risk Assessment"
  description "ISO 26262 compliant risk assessment using S×E×C methodology"
  owner "Safety Engineering"
  methodology "S×E×C"
  hazardanalysis EPBHazardAnalysis
  
  riskcriteria
    def severity S0
      description "No injuries"
    def severity S1
      description "Light to moderate injuries"
    def severity S2
      description "Severe to life-threatening injuries (survival probable)"
    def severity S3
      description "Life-threatening to fatal injuries (survival uncertain or impossible)"
    
    def exposure E0 
      description "Very low probability - highly unlikely during vehicle lifetime"
    def exposure E1 
      description "Low probability - likely to happen during vehicle lifetime"
    def exposure E2 
      description "Medium probability - likely to happen several times"
    def exposure E3 
      description "High probability - likely during most driving situations"
    def exposure E4 
      description "Very high probability - occurs frequently in normal operation"
    
    def controllability C0
      description "Controllable in general - most drivers can prevent harm"
    def controllability C1
      description "Simply controllable - nearly all drivers can prevent harm"
    def controllability C2
      description "Normally controllable - most drivers in most situations can prevent harm"
    def controllability C3
      description "Difficult to control or uncontrollable - few drivers can prevent harm"

  riskdetermination
    def risk H_ACT_001_RISK
      hazard H_ACT_001
      severity S2
      exposure E2
      controllability C2
      asil D
      rationale "Parking brake failure on incline can cause severe accidents"
      
    def risk H_ACT_002_RISK
      hazard H_ACT_002
      severity S1
      exposure E1
      controllability C1
      asil B
      rationale "Stuck brake causes component damage but low injury risk"
      
    def risk H_PWR_001_RISK
      hazard H_PWR_001
      severity S2
      exposure E1
      controllability C2
      asil C
      rationale "Power loss disables system but manual backup available"
      
    def risk H_CTRL_001_RISK
      hazard H_CTRL_001
      severity S3
      exposure E2
      controllability C3
      asil D
      rationale "Unpredictable behavior at highway speeds is uncontrollable"

  // AI NOTE: Create risk assessment for every hazard identified
  // Each risk needs S×E×C analysis and ASIL determination
  // Typical: matches number of hazards (10-100+ risk assessments)
```

### 9. SAFETY GOALS (.sgl)
**Purpose**: Safety goals derived from HARA
**Scaling**: Can contain 5-50+ safety goals depending on ASIL level and complexity
**Note**: Each ASIL-C and ASIL-D function needs associated safety goals

```sylang
def safetygoals EPBSafetyGoals
  name "EPB Safety Goals and Requirements"
  description "Safety goals derived from HARA and functional safety requirements per ISO 26262"
  item EPBSafetyItem
  riskassessment EPBRiskAssessment
  hazardidentification EPBHazardAnalysis

  def goal SG_001
    name "Prevention of Unintended Brake Application"
    description "The EPB system shall not apply parking brake without driver command during vehicle operation"
    hazard H_ACT_001, H_CTRL_001
    scenario SCEN_001_NormalDriving, SCEN_002_HighwayDriving
    asil D
    safetymeasures
      def measure SM_001 
        description "Redundant command validation and cross-checking"
        enabledby function ValidateUserInput, MonitorSystemHealth
      def measure SM_002 
        description "Independent input signal monitoring"
        enabledby function ValidateUserInput, CommunicateVehicleStatus
      def measure SM_003 
        description "Speed-dependent application inhibition"
        enabledby function ValidateUserInput, CalculateActuatorForce

  def goal SG_002
    name "Prevention of Unintended Brake Release"
    description "The EPB system shall not release parking brake without driver command when vehicle is parked"
    hazard H_ACT_002, H_PWR_001
    scenario SCEN_003_ParkingOnIncline, SCEN_004_StartupShutdown
    asil D
    safetymeasures
      def measure SM_004 
        description "Redundant position monitoring and validation"
        enabledby function DetectActuatorPosition, MonitorSystemHealth
      def measure SM_005 
        description "Power loss fail-safe operation"
        enabledby function ApplyParkingBrake, MonitorSystemHealth
      def measure SM_006 
        description "Vehicle status validation before release"
        enabledby function ValidateUserInput, CommunicateVehicleStatus

  def goal SG_003
    name "Emergency Braking Availability"
    description "The EPB system shall provide emergency braking capability when activated during vehicle motion"
    hazard H_CTRL_002, H_COMM_001
    scenario SCEN_005_EmergencyBraking, SCEN_006_SystemFailure
    asil D
    safetymeasures
      def measure SM_007 
        description "Independent emergency control path"
        enabledby function EmergencyApply, CalculateActuatorForce
      def measure SM_008 
        description "Force modulation for vehicle stability"
        enabledby function EmergencyApply, ValidateUserInput

  // AI NOTE: Add safety goals for all ASIL-C and ASIL-D functions
  // Each safety goal should include hazards, scenarios, ASIL level, and safety measures
  // Typical systems: 5-20 safety goals, Complex systems: 20-50+ safety goals
```

### 10. SAFETY ITEMS (.itm)
**Purpose**: Safety items and operational scenarios (HARA)
**Scaling**: Can contain 5-20+ operational scenarios and vehicle states
**Note**: Define comprehensive operational context for safety analysis

```sylang
use productline EPBProductLine
use featureset EPBFeatures
use functiongroup EPBFunctions

def item EPBSafetyItem
  name "EPB Safety Item Definition"
  description "Item being analyzed for hazard and risk assessment"
  owner "Safety Team"
  reviewers "Safety Engineering", "Systems Engineering"
  productline EPBProductLine
  featureset EPBFeatures
  functiongroup EPBFunctions
  
  block
    ActuatorSubsystem
    ControlSubsystem
    PowerSubsystem
    CommunicationSubsystem
    
  systemboundaries
    includes
      def boundary BOUND_001
        description "EPB actuator mechanism and control electronics"
      def boundary BOUND_002
        description "Position sensors and feedback systems"
      def boundary BOUND_003
        description "Vehicle power supply interface"
    excludes
      def boundary EXCL_001
        description "Vehicle service brake system (separate system)"
      def boundary EXCL_002
        description "Engine management and transmission control"

  operationalscenarios
    def scenario SCEN_001_NormalDriving
      name "Normal Driving Operation"
      description "Vehicle in normal driving mode at various speeds"
      conditions "Vehicle speed 0-200 km/h, normal road conditions"
      duration "Continuous during driving"
      frequency "Every trip"
      
    def scenario SCEN_002_HighwayDriving
      name "Highway Driving"
      description "Vehicle operating at highway speeds"
      conditions "Vehicle speed 80-200 km/h, highway conditions"
      duration "Extended periods during long trips"
      frequency "Regular for highway vehicles"
      
    def scenario SCEN_003_ParkingOnIncline
      name "Parking on Inclined Surface"
      description "Vehicle parked on slope with parking brake engaged"
      conditions "Grade >10%, vehicle stationary, brake applied"
      duration "Extended parking periods"
      frequency "Regular in hilly areas"
      
    def scenario SCEN_004_StartupShutdown
      name "Vehicle Startup and Shutdown"
      description "System initialization and shutdown sequences"
      conditions "Engine start/stop, system power transitions"
      duration "Brief periods during start/stop"
      frequency "Every trip"
      
    def scenario SCEN_005_EmergencyBraking
      name "Emergency Braking Situation"
      description "EPB activated while vehicle is in motion"
      conditions "Vehicle speed >0 km/h, emergency brake activation"
      duration "Brief emergency periods"
      frequency "Rare emergency situations"

  vehiclestates
    def state STATE_001_PARKED
      name "Vehicle Parked"
      description "Vehicle stationary with engine off"
      conditions "Speed = 0, engine off, parking brake engaged"
      
    def state STATE_002_DRIVING
      name "Vehicle Driving" 
      description "Vehicle in motion with engine running"
      conditions "Speed > 0, engine on, parking brake released"
      
    def state STATE_003_STARTUP
      name "Vehicle Starting"
      description "Engine starting sequence"
      conditions "Engine starting, systems initializing"

  // AI NOTE: Add scenarios for all operational contexts where EPB is active
  // Include normal operation, edge cases, and failure scenarios
  // Typical: 5-15 scenarios, Complex systems: 15-25+ scenarios
```

### 11. REQUIREMENTS (.req)
**Purpose**: Requirements specifications and traceability
**Scaling**: Can contain 50-500+ requirements depending on system complexity
**Note**: Use EARS format and ensure full traceability

```sylang
use productline EPBProductLine
use functiongroup EPBFunctions
use safetygoals EPBSafetyGoals

def reqsection EPBSystemRequirements
  name "EPB System Requirements Specification"
  description "Complete requirements for Electric Parking Brake system"
  owner "Requirements Engineering Team"
  productline EPBProductLine
  functiongroup EPBFunctions
  safetygoals EPBSafetyGoals
  
  def requirement REQ_SYS_001
    name "Parking Brake Application"
    description "WHEN the driver activates the parking brake switch THE system SHALL engage the parking brake mechanism WITHIN 2 seconds"
    type functional
    source "Customer requirements specification"
    derivedfrom "Vehicle parking requirements"
    allocatedto ActuatorSubsystem
    safetylevel ASIL-C
    rationale "Timely brake application required for safe parking"
    verificationcriteria "Timing verification per test procedure TS_001"
    status approved
    traceability "Functions: ApplyParkingBrake, Safety Goal: SG_001"

  def requirement REQ_SYS_002
    name "Parking Brake Release"
    description "WHEN the driver deactivates the parking brake switch AND vehicle conditions are safe THE system SHALL release the parking brake mechanism WITHIN 1 second"
    type functional
    source "Customer requirements specification"
    derivedfrom "Drive initiation requirements"
    allocatedto ActuatorSubsystem, SafetySubsystem
    safetylevel ASIL-C
    rationale "Quick release required for smooth drive initiation"
    verificationcriteria "Release timing and safety condition verification per TS_002"
    status approved
    traceability "Functions: ReleaseParkingBrake, ValidateUserInput"

  def requirement REQ_SYS_003
    name "Emergency Braking Function"
    description "WHEN the parking brake is activated while vehicle speed is greater than 0 km/h THE system SHALL provide controlled braking force"
    type safety
    source "Safety engineering analysis"
    derivedfrom "Emergency braking safety goals"
    allocatedto EmergencyBrakeSubsystem
    safetylevel ASIL-D
    rationale "Emergency braking capability required for safety"
    verificationcriteria "Emergency braking effectiveness per TS_003"
    status approved
    traceability "Functions: EmergencyApply, Safety Goal: SG_002"

  def requirement REQ_SYS_004
    name "System Fault Detection"
    description "THE system SHALL detect and report internal faults WITHIN 200 milliseconds of fault occurrence"
    type diagnostic
    source "ISO 26262 diagnostic requirements"
    derivedfrom "Safety integrity requirements"
    allocatedto DiagnosticSubsystem
    safetylevel ASIL-C
    rationale "Rapid fault detection required for safety integrity"
    verificationcriteria "Fault injection testing per TS_004"
    status approved
    traceability "Functions: MonitorSystemHealth, Safety Goal: SG_003"

  def requirement REQ_SYS_005
    name "Position Feedback Accuracy"
    description "THE system SHALL provide actuator position feedback with accuracy of ±2mm"
    type performance
    source "Control system requirements"
    derivedfrom "Precise control requirements"
    allocatedto SensorSubsystem
    safetylevel ASIL-C
    rationale "Accurate position feedback required for precise control"
    verificationcriteria "Position accuracy measurement per TS_005"
    status approved
    traceability "Functions: DetectActuatorPosition"

  def requirement REQ_SYS_006
    name "Operating Temperature Range"
    description "THE system SHALL operate normally WITHIN temperature range -40°C to +85°C"
    type environmental
    source "Automotive environmental standards"
    derivedfrom "Environmental compliance requirements"
    allocatedto AllSubsystems
    safetylevel ASIL-C
    rationale "Automotive temperature range compliance required"
    verificationcriteria "Environmental testing per TS_006"
    status approved
    traceability "All functions under environmental conditions"

  def requirement REQ_SYS_007
    name "Power Consumption Limit"
    description "THE system SHALL consume no more than 150W peak power during brake application"
    type performance
    source "Vehicle electrical system requirements"
    derivedfrom "Power budget constraints"
    allocatedto PowerSubsystem, ActuatorSubsystem
    safetylevel QM
    rationale "Power consumption must fit within vehicle electrical budget"
    verificationcriteria "Power measurement during operation per TS_007"
    status approved
    traceability "Functions: ApplyParkingBrake, CalculateActuatorForce"

  // AI NOTE: Add requirements for all functions, features, and safety goals
  // Use EARS format: WHEN [condition] THE [system] SHALL [action] WITHIN [time]
  // Typical systems: 50-200 requirements, Complex systems: 200-500+ requirements
  // Ensure full traceability to functions, features, and safety goals
```

### 12. BLOCK DEFINITIONS (.blk)
**Purpose**: System/component block definitions with ports
**Scaling**: Can contain 10-100+ blocks depending on system hierarchy
**Note**: Create blocks for system, subsystems, components, and parts

```sylang
use functiongroup EPBFunctions
use featureset EPBFeatures
use configset EPBStandardConfig

def block system EPBSystem
  name "Electric Parking Brake System"
  description "Complete EPB system implementation"
  owner "Systems Engineering Team"
  tags "EPB", "system", "top-level"
  safetylevel ASIL-D
  contains ActuatorSubsystem, ControlSubsystem, PowerSubsystem, CommunicationSubsystem
  enables feature ParkingBrake, EmergencyBraking, DiagnosticMonitoring
  implements ApplyParkingBrake, ReleaseParkingBrake, EmergencyApply, MonitorSystemHealth
  config c_ControllerType "AdvancedController"
  config c_ActuatorType "ElectricMotor"
  
  port in VehiclePower_12V, UserCommands, VehicleStatus
  port in CANBus_High, CANBus_Low
  
  def port out BrakeStatus
    name "Brake Status Output"
    description "Current brake engagement status"
    type digital
    owner "Interface Team"
    safetylevel ASIL-C
    tags "status", "digital"
    characteristics "TTL logic levels, 100Hz update rate"

  def port out DiagnosticData
    name "Diagnostic Data Output"
    description "System health and diagnostic information"
    type data
    owner "Diagnostic Team"
    safetylevel ASIL-B
    tags "diagnostics", "data"
    characteristics "CAN protocol, 1Hz to 50Hz depending on data type"

def block subsystem ActuatorSubsystem
  name "Brake Actuator Subsystem"
  description "Physical brake actuation mechanism and control"
  owner "Mechanical Engineering Team"
  tags "actuator", "mechanical", "safety-critical"
  safetylevel ASIL-D
  contains ActuatorMotor, GearReduction, PositionSensor, ForceController
  implements ApplyParkingBrake, ReleaseParkingBrake, DetectActuatorPosition
  enables feature ManualApply, ManualRelease
  config c_ActuatorType "ElectricMotor"
  
  port in ActuatorCommands, PowerSupply_12V
  port out PositionFeedback, ForceFeedback
  
  def port out MechanicalOutput
    name "Mechanical Brake Force"
    description "Physical force applied to brake mechanism"
    type mechanical
    owner "Actuator Team"
    safetylevel ASIL-D
    tags "force", "mechanical"
    characteristics "0-5000N force range, position accuracy ±2mm"

def block subsystem ControlSubsystem
  name "EPB Control Subsystem"
  description "Main control logic and safety monitoring"
  owner "Control Engineering Team"
  tags "control", "software", "safety-critical"
  safetylevel ASIL-D
  contains MainController, SafetyController, ControlAlgorithms
  implements CalculateActuatorForce, ValidateUserInput, MonitorSystemHealth
  enables feature FaultDetection, StatusReporting
  config c_ControllerType "AdvancedController"
  
  port in UserInputs, SensorFeedback, VehicleData
  port out ControlCommands, StatusOutputs, DiagnosticOutputs

def block subsystem PowerSubsystem
  name "Power Management Subsystem"
  description "Electrical power distribution and protection"
  owner "Power Electronics Team"
  tags "power", "electrical", "protection"
  safetylevel ASIL-C
  contains PowerDistribution, VoltageRegulator, CurrentMonitor, ProtectionCircuits
  implements PowerManagement, OvercurrentProtection
  enables feature PowerProtection
  config c_PowerManagement "StandardPower"
  
  port in VehiclePower_12V
  port out RegulatedPower_12V, PowerStatus
  
  def port out ProtectedPower
    name "Protected Power Output"
    description "Overcurrent and overvoltage protected power"
    type electrical
    owner "Power Team"
    safetylevel ASIL-C
    tags "power", "protected"
    characteristics "12V ±5%, max 15A with protection"

def block component ActuatorMotor
  name "EPB Actuator Motor"
  description "Electric motor for brake actuation"
  owner "Motor Engineering Team"
  tags "motor", "actuator", "component"
  safetylevel ASIL-D
  contains MotorWinding, MotorController, MotorEncoder
  implements MotorControl, PositionControl
  config c_MotorType "BrushlessDC"
  
  port in MotorCommands, MotorPower
  port out MotorPosition, MotorCurrent
  
  def port out MechanicalTorque
    name "Motor Torque Output"
    description "Mechanical torque for brake actuation"
    type mechanical
    owner "Motor Team"
    safetylevel ASIL-D
    tags "torque", "mechanical"
    characteristics "0-50 Nm torque range, 0-1000 RPM speed"

// AI NOTE: Create blocks for complete system hierarchy
// System → Subsystems → Components → Subcomponents → Parts
// Typical: 10-30 blocks for simple systems, 50-100+ blocks for complex systems
// Each block should have appropriate ports and configuration options
```

### 13. TEST CASES (.tst)
**Purpose**: Test case specifications and execution
**Scaling**: Can contain 50-1000+ test cases depending on system complexity
**Note**: Create comprehensive test coverage for all requirements

```sylang
use reqsection EPBSystemRequirements
use functiongroup EPBFunctions
use safetygoals EPBSafetyGoals

def testsuite EPBSystemTests
  name "EPB System Test Suite"
  description "Comprehensive test cases for EPB system validation"
  owner "Test Engineering Team"
  requirements EPBSystemRequirements
  functions EPBFunctions
  safetygoals EPBSafetyGoals
  
  def testcase TC_SYS_001
    name "Parking Brake Application Timing"
    description "Verify brake application occurs within specified time"
    requirement REQ_SYS_001
    type functional
    method "HIL testing with real actuator"
    setup "Vehicle stationary, EPB switch activated"
    steps
      step "Activate parking brake switch"
      step "Measure time to brake engagement"
      step "Verify engagement force"
    expected "Brake engages within 2.0 seconds ±0.1s"
    passcriteria "Timing 1.8-2.2 seconds, force >3000N"
    safetylevel ASIL-C
    
  def testcase TC_SYS_002
    name "Parking Brake Release Timing"
    description "Verify brake release occurs within specified time"
    requirement REQ_SYS_002
    type functional
    method "HIL testing with safety conditions"
    setup "Vehicle stationary, EPB engaged, safety conditions met"
    steps
      step "Deactivate parking brake switch"
      step "Verify safety condition checks"
      step "Measure time to brake release"
    expected "Brake releases within 1.0 second ±0.1s"
    passcriteria "Timing 0.8-1.2 seconds, force <100N"
    safetylevel ASIL-C
    
  def testcase TC_SYS_003
    name "Emergency Braking Function"
    description "Verify emergency braking during vehicle motion"
    requirement REQ_SYS_003
    type safety
    method "Vehicle testing on closed course"
    setup "Vehicle moving at 30 km/h, EPB activated"
    steps
      step "Activate parking brake while moving"
      step "Monitor braking force modulation"
      step "Measure stopping distance"
    expected "Controlled deceleration without wheel lock"
    passcriteria "Deceleration 2-4 m/s², no ABS activation"
    safetylevel ASIL-D
    
  def testcase TC_SYS_004
    name "Fault Detection Response"
    description "Verify system detects and reports internal faults"
    requirement REQ_SYS_004
    type diagnostic
    method "Fault injection testing"
    setup "System operational, fault injection ready"
    steps
      step "Inject actuator sensor fault"
      step "Monitor fault detection timing"
      step "Verify diagnostic code reporting"
    expected "Fault detected within 200ms"
    passcriteria "Detection time <200ms, correct DTC code"
    safetylevel ASIL-C
    
  def testcase TC_ENV_001
    name "Low Temperature Operation"
    description "Verify system operation at minimum temperature"
    requirement REQ_SYS_006
    type environmental
    method "Environmental chamber testing"
    setup "System at -40°C for 2 hours"
    steps
      step "Activate parking brake"
      step "Monitor response time and force"
      step "Test release function"
    expected "Normal operation within specifications"
    passcriteria "Function within normal timing and force limits"
    safetylevel ASIL-C
    
  def testcase TC_ENV_002
    name "High Temperature Operation"
    description "Verify system operation at maximum temperature"
    requirement REQ_SYS_006
    type environmental
    method "Environmental chamber testing"
    setup "System at +85°C for 2 hours"
    steps
      step "Activate parking brake"
      step "Monitor thermal protection"
      step "Test continuous operation"
    expected "Normal operation without thermal shutdown"
    passcriteria "Function within normal parameters, no overtemperature"
    safetylevel ASIL-C

  def testcase TC_PWR_001
    name "Power Consumption Measurement"
    description "Verify power consumption within limits"
    requirement REQ_SYS_007
    type performance
    method "Power analyzer measurement"
    setup "System connected to power analyzer"
    steps
      step "Measure idle power consumption"
      step "Activate brake and measure peak power"
      step "Monitor power during operation"
    expected "Peak power ≤150W, idle power ≤5W"
    passcriteria "All power measurements within specified limits"
    safetylevel QM

  // AI NOTE: Create test cases for every requirement
  // Include functional, safety, environmental, and performance tests
  // Typical systems: 50-200 test cases, Complex systems: 200-500+ test cases
  // Each test should trace to specific requirements and safety goals
```

### 14. FAILURE MODE ANALYSIS (.fma)
**Purpose**: Document failure modes, effects, and analysis for system components
**Location**: `failuremodeanalysis/` folder
**Key Elements**: failure modes, severity ratings, occurrence probabilities, detection methods, RPN calculations
**Scaling**: One file per subsystem or major component
**Standards**: ISO 26262, FMEA methodology

```fma
def failuremodeanalysis SystemName_FailureModeAnalysis
  
  def failuremode FM_ComponentFailure
    name "Component Failure Description"
    description "Detailed description of the failure mode"
    in function FunctionName
    severity 1-10
    occurrence 1-10
    detection 1-10
    rpn auto
    actionpriority high|medium|low
    safetylevel ASIL-A|ASIL-B|ASIL-C|ASIL-D
    causes failuremode FM_Cause1, FM_Cause2
    effects failuremode FM_Effect1, FM_Effect2
    detection DetectionMethod1, DetectionMethod2
    mitigation MitigationMethod1, MitigationMethod2
```
    
  def failuremode FM_ACT_002
    name "Gear Reduction Mechanism Jam"
    description "Gear train becomes jammed or mechanically locked"
    component GearReduction
    function DetectActuatorPosition, CalculateActuatorForce
    cause "Foreign object, gear tooth breakage, lubrication failure, wear"
    effect "Actuator cannot move in either direction"
    localeffect "Mechanical impedance blocks motion"
    systemeffect "Brake stuck in current position"
    detection "Position sensor monitoring, torque feedback"
    occurrence 2
    severity 8
    detection_rating 3
    rpn 48
    safetylevel ASIL-D
    
  def failuremode FM_CTRL_001
    name "Main Controller Software Exception"
    description "Software experiences unhandled exception or memory corruption"
    component MainController
    function ValidateUserInput, MonitorSystemHealth, CalculateActuatorForce
    cause "Software bug, cosmic radiation, EMI interference, stack overflow"
    effect "Unpredictable system behavior or complete shutdown"
    localeffect "Control algorithms stop executing"
    systemeffect "Loss of all control functions"
    detection "Watchdog timer, software monitoring, diagnostic routines"
    occurrence 4
    severity 10
    detection_rating 2
    rpn 80
    safetylevel ASIL-D
    
  def failuremode FM_CTRL_002
    name "Control Hardware Processor Failure"
    description "Main processor unit fails or becomes unresponsive"
    component MainController
    function ApplyParkingBrake, ReleaseParkingBrake, EmergencyApply
    cause "Electrical overstress, thermal damage, manufacturing defect, aging"
    effect "Complete loss of control processing"
    localeffect "No command processing or execution"
    systemeffect "System becomes unresponsive to all commands"
    detection "Health monitoring, communication timeout, diagnostic self-test"
    occurrence 2
    severity 10
    detection_rating 3
    rpn 60
    safetylevel ASIL-D
    
  def failuremode FM_SENS_001
    name "Position Sensor Signal Drift"
    description "Position sensor provides incorrect position readings"
    component PositionSensor
    function DetectActuatorPosition
    cause "Temperature variation, aging, magnetic interference, calibration drift"
    effect "Incorrect position feedback leads to control errors"
    localeffect "Position readings do not match actual position"
    systemeffect "Inaccurate brake control, potential partial engagement"
    detection "Position plausibility checks, dual sensor comparison"
    occurrence 5
    severity 6
    detection_rating 5
    rpn 150
    safetylevel ASIL-C
    
  def failuremode FM_PWR_001
    name "Power Supply Undervoltage"
    description "Power supply voltage drops below operational threshold"
    component PowerDistribution
    function PowerManagement
    cause "Battery discharge, alternator failure, wiring resistance, high load"
    effect "Insufficient power for normal operation"
    localeffect "Reduced motor torque, slower response"
    systemeffect "Degraded performance or complete shutdown"
    detection "Voltage monitoring, power quality checks"
    occurrence 3
    severity 7
    detection_rating 2
    rpn 42
    safetylevel ASIL-C

  def failuremode FM_COMM_001
    name "CAN Bus Communication Loss"
    description "Loss of communication with vehicle network"
    component CommunicationInterface
    function CommunicateVehicleStatus
    cause "Bus fault, connector failure, EMI interference, protocol error"
    effect "Isolation from vehicle systems"
    localeffect "No data exchange with other ECUs"
    systemeffect "Reduced integration, loss of vehicle status"
    detection "Communication timeout, message monitoring"
    occurrence 4
    severity 5
    detection_rating 3
    rpn 60
    safetylevel ASIL-B

  // AI NOTE: Analyze all components and functions for failure modes
  // Calculate RPN (Risk Priority Number) = Occurrence × Severity × Detection
  // Typical systems: 30-100 failure modes, Complex systems: 100-200+ failure modes
  // Focus on high RPN values and ASIL-C/D functions
```

### 15. CONTROL MEASURES (.fmc)
**Purpose**: Document prevention, detection, and mitigation measures for failure modes
**Location**: `failuremodecontrols/` folder
**Key Elements**: prevention measures, detection methods, mitigation strategies, effectiveness ratings
**Scaling**: One file per subsystem or major component
**Standards**: ISO 26262, FMEA methodology

```fmc
def controlmeasures SystemName_ControlMeasures

  def prevention MeasureName
    name "Prevention Measure Name"
    description "Description of the prevention measure"
    scope internal|external
    effectiveness high|medium|low
    cost high|medium|low
    complexity simple|moderate|complex
    frequency continuous|periodic|on-demand
    occurrencereduction 1-100
    severityreduction 1-100
    coverage complete|partial
    independence high|medium|low
    maturity mature|developing|experimental
    implementation "Implementation description"
    verification "Verification method"
    responsibility "Responsible Team"
    asil A|B|C|D

  def detection MeasureName
    name "Detection Measure Name"
    description "Description of the detection measure"
    scope internal|external
    effectiveness high|medium|low
    cost high|medium|low
    complexity simple|moderate|complex
    detecttime immediate|delayed
    detectionrating 1-10
    coverage complete|partial
    diagnosticcoverage 1-100
    independence high|medium|low
    maturity mature|developing|experimental
    implementation "Implementation description"
    verification "Verification method"
    responsibility "Responsible Team"
    asil A|B|C|D
    depends measure MeasureName

  def mitigation MeasureName
    name "Mitigation Measure Name"
    description "Description of the mitigation measure"
    scope internal|external
    effectiveness high|medium|low
    cost high|medium|low
    complexity simple|moderate|complex
    responsetime immediate|delayed
    severityreduction 1-100
    coverage complete|partial
    independence high|medium|low
    maturity mature|developing|experimental
    implementation "Implementation description"
    verification "Verification method"
    responsibility "Responsible Team"
    asil A|B|C|D
    depends measure MeasureName
```
      type mitigation
      effectiveness low
      implementation "Manual backup mechanism activation"
      validation "Manual backup operation testing"
      
  def control CTRL_CTRL_001
    name "Software Reliability Control"
    failuremode FM_CTRL_001
    description "Software fault tolerance and recovery mechanisms"
    owner "Software Engineering Team"
    
    def measure PREV_003
      type prevention
      effectiveness high
      implementation "MISRA-C coding standards and code reviews"
      validation "Static code analysis and review records"
      
    def measure DET_003
      type detection
      effectiveness high
      implementation "Watchdog timer and software monitoring"
      validation "Software fault injection and recovery testing"
      
    def measure MIT_003
      type mitigation
      effectiveness high
      implementation "Safe state transition and system restart"
      validation "Safe state verification and restart timing tests"
      
  def control CTRL_CTRL_002
    name "Hardware Redundancy Control"
    failuremode FM_CTRL_002
    description "Hardware fault tolerance through redundancy"
    owner "Hardware Engineering Team"
    
    def measure PREV_004
      type prevention
      effectiveness medium
      implementation "Component derating and thermal management"
      validation "Reliability prediction and thermal testing"
      
    def measure DET_004
      type detection
      effectiveness high
      implementation "Dual-core lockstep operation and comparison"
      validation "Processor fault injection testing"
      
    def measure MIT_004
      type mitigation
      effectiveness high
      implementation "Failover to backup controller"
      validation "Failover timing and functionality testing"
      
  def control CTRL_SENS_001
    name "Sensor Accuracy Control"
    failuremode FM_SENS_001
    description "Position sensor accuracy and validation"
    owner "Sensor Engineering Team"
    
    def measure PREV_005
      type prevention
      effectiveness medium
      implementation "Temperature compensation and calibration"
      validation "Temperature cycling and calibration verification"
      
    def measure DET_005
      type detection
      effectiveness high
      implementation "Dual sensor comparison and plausibility checks"
      validation "Sensor fault simulation and detection testing"
      
    def measure MIT_005
      type mitigation
      effectiveness medium
      implementation "Sensor signal filtering and estimation algorithms"
      validation "Signal processing verification and accuracy testing"
      
  def control CTRL_PWR_001
    name "Power Supply Protection Control"
    failuremode FM_PWR_001
    description "Power supply monitoring and protection"
    owner "Power Electronics Team"
    
    def measure PREV_006
      type prevention
      effectiveness medium
      implementation "Voltage regulation and filtering"
      validation "Power quality testing and regulation verification"
      
    def measure DET_006
      type detection
      effectiveness high
      implementation "Continuous voltage and current monitoring"
      validation "Power monitoring system testing"
      
    def measure MIT_006
      type mitigation
      effectiveness medium
      implementation "Low power mode operation"
      validation "Low power mode functionality testing"
      
  def control CTRL_COMM_001
    name "Communication Reliability Control"
    failuremode FM_COMM_001
    description "Communication fault tolerance and recovery"
    owner "Communication Engineering Team"
    
    def measure PREV_007
      type prevention
      effectiveness medium
      implementation "Robust communication protocols and error correction"
      validation "Protocol compliance testing and error injection"
      
    def measure DET_007
      type detection
      effectiveness high
      implementation "Message timeout and data validation"
      validation "Communication fault detection testing"
      
    def measure MIT_007
      type mitigation
      effectiveness medium
      implementation "Local operation mode with reduced functionality"
      validation "Communication loss scenario testing"

// AI NOTE: Create controls for all identified failure modes
// Each control should have multiple measures (prevention, detection, mitigation)
// Typical: 1-5 controls per failure mode, 2-6 measures per control
// Include implementation details and validation methods
```

### 16. FAULT TREE ANALYSIS (.fta)
**Purpose**: Top-down fault tree analysis for safety-critical functions
**Scaling**: Can contain 5-30+ fault trees depending on safety-critical functions
**Note**: Create fault trees for all ASIL-C and ASIL-D functions

```sylang
use safetygoals EPBSafetyGoals
use functiongroup EPBFunctions
use failuremodeanalysis EPBFailureModeAnalysis

def faulttreeanalysis EPBFaultTreeAnalysis
  name "EPB System Fault Tree Analysis"
  description "Comprehensive fault tree analysis for safety-critical functions"
  owner "Safety Engineering Team"
  tags "FTA", "safety-analysis", "fault-trees"
  safetylevel ASIL-D
  methodology "IEC 61025 Fault Tree Analysis"
  
  def faulttree FT_001
    name "Unintended Brake Release Fault Tree"
    description "Analysis of unintended parking brake release scenarios"
    topevent "Unintended brake release during parking"
    safetylevel ASIL-D
    targetreliability 1E-7
    
    events
      def topevent TE_001
        name "Unintended Brake Release"
        description "Parking brake releases without driver command while parked"
        type undesired
        probability 1E-7
        
      def intermediateevent IE_001
        name "Control System Commands Release"
        description "Control system erroneously commands brake release"
        type intermediate
        gate OR
        inputs SW_FAULT, HW_FAULT, SENSOR_FAULT
        
      def intermediateevent IE_002
        name "Mechanical System Releases"
        description "Mechanical system releases brake without command"
        type intermediate
        gate OR
        inputs MECH_FAILURE, ACTUATOR_FAULT
        
      def basicevent SW_FAULT
        name "Software Commands Erroneous Release"
        description "Software bug causes incorrect release command"
        type basic
        probability 5E-8
        failuremode FM_CTRL_001
        
      def basicevent HW_FAULT
        name "Hardware Failure Causes Release"
        description "Control hardware fails and commands release"
        type basic
        probability 2E-8
        failuremode FM_CTRL_002
        
      def basicevent SENSOR_FAULT
        name "Sensor Provides Wrong Position"
        description "Position sensor indicates brake released when applied"
        type basic
        probability 1E-8
        failuremode FM_SENS_001
        
      def basicevent MECH_FAILURE
        name "Mechanical Brake Mechanism Fails"
        description "Brake mechanism mechanically fails and releases"
        type basic
        probability 5E-9
        failuremode FM_ACT_002
        
      def basicevent ACTUATOR_FAULT
        name "Actuator Commands Unintended Release"
        description "Actuator receives or generates erroneous release signal"
        type basic
        probability 1E-8
        failuremode FM_ACT_001
    
    structure
      TE_001 OR IE_001, IE_002
      IE_001 OR SW_FAULT, HW_FAULT, SENSOR_FAULT
      IE_002 OR MECH_FAILURE, ACTUATOR_FAULT
    
    analysis
      cutsets
        cutset CS_001 "SW_FAULT" probability 5E-8
        cutset CS_002 "HW_FAULT" probability 2E-8
        cutset CS_003 "SENSOR_FAULT" probability 1E-8
        cutset CS_004 "MECH_FAILURE" probability 5E-9
        cutset CS_005 "ACTUATOR_FAULT" probability 1E-8
      importancemeasures
        importance SW_FAULT 0.50
        importance HW_FAULT 0.20
        importance SENSOR_FAULT 0.10
        importance ACTUATOR_FAULT 0.10
        importance MECH_FAILURE 0.05
        
  def faulttree FT_002
    name "Unintended Brake Application Fault Tree"
    description "Analysis of unintended parking brake application scenarios"
    topevent "Unintended brake application during driving"
    safetylevel ASIL-D
    targetreliability 1E-7
    
    events
      def topevent TE_002
        name "Unintended Brake Application"
        description "Parking brake applies without driver command while driving"
        type undesired
        probability 1E-7
        
      def intermediateevent IE_003
        name "Control System Commands Apply"
        description "Control system erroneously commands brake application"
        type intermediate
        gate OR
        inputs SW_CMD_FAULT, HW_CMD_FAULT, INPUT_FAULT
        
      def intermediateevent IE_004
        name "Mechanical System Applies"
        description "Mechanical system applies brake without command"
        type intermediate
        gate OR
        inputs MECH_STICK, ACTUATOR_RUN
        
      def basicevent SW_CMD_FAULT
        name "Software Commands Erroneous Apply"
        description "Software bug causes incorrect apply command"
        type basic
        probability 3E-8
        failuremode FM_CTRL_001
        
      def basicevent HW_CMD_FAULT
        name "Hardware Generates Apply Signal"
        description "Control hardware fails and generates apply signal"
        type basic
        probability 1E-8
        failuremode FM_CTRL_002
        
      def basicevent INPUT_FAULT
        name "Input Signal Interpreted as Apply"
        description "Noise or fault interpreted as apply command"
        type basic
        probability 2E-8
        
      def basicevent MECH_STICK
        name "Mechanical Brake Sticks"
        description "Brake mechanism mechanically sticks in applied position"
        type basic
        probability 1E-9
        failuremode FM_ACT_002
        
      def basicevent ACTUATOR_RUN
        name "Actuator Runs Away"
        description "Actuator runs uncontrolled and applies brake"
        type basic
        probability 5E-9
        failuremode FM_ACT_001
    
    structure
      TE_002 OR IE_003, IE_004
      IE_003 OR SW_CMD_FAULT, HW_CMD_FAULT, INPUT_FAULT
      IE_004 OR MECH_STICK, ACTUATOR_RUN

  def faulttree FT_003
    name "Emergency Function Not Available Fault Tree"
    description "Analysis of emergency braking function unavailability"
    topevent "Emergency braking not available when needed"
    safetylevel ASIL-D
    targetreliability 1E-8
    
    events
      def topevent TE_003
        name "Emergency Function Unavailable"
        description "Emergency braking function is not available when activated"
        type undesired
        probability 5E-9
        
      def intermediateevent IE_005
        name "Emergency Function Not Available"
        description "Emergency braking function is not available when needed"
        type intermediate
        gate OR
        inputs EMG_SW_FAULT, EMG_CTRL_FAULT, EMG_COMM_FAULT
        
      def intermediateevent IE_006
        name "Inadequate Braking Force"
        description "Emergency function active but provides insufficient force"
        type intermediate
        gate OR
        inputs FORCE_CALC_ERROR, ACTUATOR_WEAK, BRAKE_WEAR
        
      def basicevent EMG_SW_FAULT
        name "Emergency Switch Recognition Failure"
        description "System fails to recognize emergency brake activation"
        type basic
        probability 1E-9
        failuremode FM_UI_002
        
      def basicevent EMG_CTRL_FAULT
        name "Emergency Control Algorithm Failure"
        description "Emergency control algorithm fails or is unavailable"
        type basic
        probability 2E-9
        failuremode FM_CTRL_003
        
      def basicevent FORCE_CALC_ERROR
        name "Force Calculation Error"
        description "System calculates insufficient braking force"
        type basic
        probability 1E-9
        failuremode FM_CTRL_004
        
      def basicevent ACTUATOR_WEAK
        name "Actuator Insufficient Force"
        description "Actuator cannot generate required braking force"
        type basic
        probability 1E-9
        failuremode FM_ACT_003
    
    structure
      TE_003 OR IE_005, IE_006
      IE_005 OR EMG_SW_FAULT, EMG_CTRL_FAULT, EMG_COMM_FAULT
      IE_006 OR FORCE_CALC_ERROR, ACTUATOR_WEAK, BRAKE_WEAR

// AI NOTE: Create fault trees for all safety-critical functions
// Each fault tree should analyze one top-level undesired event
// Include intermediate events, basic events, and gate logic
// Typical systems: 5-15 fault trees, Complex systems: 15-30+ fault trees
// Calculate probabilities and identify critical cut sets
```

# ================================================================
# SECTION 3: INTELLIGENT PROJECT GENERATION WORKFLOWS
# ================================================================

## 3.1 COMPLETE PROJECT GENERATION WORKFLOW

### PHASE 1: FOUNDATION (Platform Engineering)
```
1. Create {SystemName}/ root directory
2. Create platform-engineering/ subdirectory
3. Generate {SystemName}ProductLine.ple (use extension 1 template)
4. Generate {SystemName}Features.fml (use extension 2 template)
5. Generate {SystemName}Functions.fun (use extension 3 template)
6. Generate {SystemName}VariantModel.vml (use extension 4 template)
7. Auto-generate {SystemName}VariantConfig.vcf (use extension 5 template)
```

### PHASE 2: SAFETY ENGINEERING (ISO 26262)
```
1. Create safety-engineering/ subdirectory
2. Generate {SystemName}SafetyGoals.sgl (use extension 6 template)
3. Generate {SystemName}HazardAnalysis.haz (use extension 7 template)
4. Generate {SystemName}RiskAssessment.rsk (use extension 8 template)
5. Generate {SystemName}SafetyItems.itm (use extension 9 template)
```

### PHASE 3: SYSTEM ENGINEERING (Architecture & Requirements)
```
1. Create system-engineering/ subdirectory
2. Generate {SystemName}Requirements.req (use extension 10 template)
3. Generate {SystemName}SystemArchitecture.blk (use extension 11 template)
4. Generate {SystemName}TestSuite.tst (use extension 12 template)
```

### PHASE 4: DETAILED ANALYSIS (Failure Analysis)
```
1. Generate {SystemName}FailureModeAnalysis.fma (use extension 13 template)
2. Generate {SystemName}FailureModeControls.fmc (use extension 14 template)
3. Generate {SystemName}FaultTreeAnalysis.fta (use extension 15 template)
```

### PHASE 5: COMPONENT ENGINEERING (Discipline-Specific)
```
1. Create component-engineering/ subdirectory
2. Create electronics/ subdirectory with modules/ and parts/
3. Create mechanical/ subdirectory with modules/ and parts/
4. Create software/ subdirectory with modules/ and parts/
5. Generate discipline-specific .blk files for detailed component definitions
```

## 3.2 AUTOMOTIVE SYSTEM INTELLIGENT FOLDER STRUCTURES

### EPB (ELECTRIC PARKING BRAKE) STRUCTURE
```
EPB_System/
├── platform-engineering/
│   ├── EPBProductLine.ple
│   ├── EPBFeatures.fml
│   ├── EPBFunctions.fun
│   ├── EPBVariantModel.vml
│   └── EPBVariantConfig.vcf
├── safety-engineering/
│   ├── EPBSafetyGoals.sgl
│   ├── EPBHazardAnalysis.haz
│   ├── EPBRiskAssessment.rsk
│   ├── EPBSafetyItems.itm
│   ├── EPBFailureModeAnalysis.fma
│   ├── EPBFailureModeControls.fmc
│   └── EPBFaultTreeAnalysis.fta
├── system-engineering/
│   ├── EPBRequirements.req
│   ├── EPBSystemArchitecture.blk
│   ├── EPBTestSuite.tst
│   ├── ActuatorSubsystem/
│   │   └── ActuatorSubsystem.blk
│   ├── ControlSubsystem/
│   │   └── ControlSubsystem.blk
│   └── PowerSubsystem/
│       └── PowerSubsystem.blk
└── component-engineering/
    ├── electronics/
    │   ├── modules/
    │   └── parts/
    ├── mechanical/
    │   ├── modules/
    │   └── parts/
    └── software/
        ├── modules/
        └── parts/
```

### INVERTER STRUCTURE
```
Inverter_System/
├── platform-engineering/
│   ├── InverterProductLine.ple
│   ├── InverterFeatures.fml
│   ├── InverterFunctions.fun
│   ├── InverterVariantModel.vml
│   └── InverterVariantConfig.vcf
├── safety-engineering/
│   ├── InverterSafetyGoals.sgl
│   ├── InverterHazardAnalysis.haz
│   ├── InverterRiskAssessment.rsk
│   ├── InverterSafetyItems.itm
│   ├── InverterFailureModeAnalysis.fma
│   ├── InverterFailureModeControls.fmc
│   └── InverterFaultTreeAnalysis.fta
├── system-engineering/
│   ├── InverterRequirements.req
│   ├── InverterSystemArchitecture.blk
│   ├── InverterTestSuite.tst
│   ├── PowerElectronicsSubsystem/
│   │   └── PowerElectronicsSubsystem.blk
│   ├── MotorControlSubsystem/
│   │   └── MotorControlSubsystem.blk
│   └── ThermalManagementSubsystem/
│       └── ThermalManagementSubsystem.blk
└── component-engineering/
    ├── electronics/
    │   ├── modules/
    │   └── parts/
    ├── mechanical/
    │   ├── modules/
    │   └── parts/
    └── software/
        ├── modules/
        └── parts/
```

## AI SCALING INSTRUCTIONS

**CRITICAL FOR AI AGENTS**: The examples above are STARTING TEMPLATES only. Real systems require:

### FEATURE SCALING (.fml)
- Simple systems: 10-50 features
- Medium systems: 50-150 features  
- Complex systems: 150-300+ features
- **Add as many features as needed for complete system coverage**

### FUNCTION SCALING (.fun)
- Simple systems: 20-80 functions
- Medium systems: 80-200 functions
- Complex systems: 200-500+ functions
- **Every feature must have implementing functions**

### REQUIREMENTS SCALING (.req)
- Simple systems: 50-200 requirements
- Medium systems: 200-500 requirements
- Complex systems: 500-1500+ requirements
- **Use EARS format with full traceability**

### TEST SCALING (.tst)
- Simple systems: 50-200 test cases
- Medium systems: 200-500 test cases
- Complex systems: 500-1500+ test cases
- **Every requirement needs verification test cases**

### SAFETY SCALING (.sgl, .haz, .rsk)
- Safety goals: 5-50 depending on ASIL level
- Hazards: 10-100 depending on system complexity
- Risk assessments: Match number of hazards
- **All ASIL-C and ASIL-D functions need safety analysis**

### BLOCK SCALING (.blk)
- Simple systems: 10-30 blocks
- Medium systems: 30-80 blocks
- Complex systems: 80-200+ blocks
- **Create complete system hierarchy: System → Subsystems → Components → Parts**

## CONTEXT-AWARE REQUIREMENTS GENERATION

When user requests "Create requirements for [SUBSYSTEM]", AI must:

1. **Read ALL context files**: .ple, .fml, .fun, .sgl, .haz, .rsk, .blk
2. **Understand system domain** from ProductLine
3. **Identify relevant features** from FeatureSet
4. **Find allocated functions** from FunctionGroup
5. **Understand safety context** from SafetyGoals and HazardAnalysis
6. **Generate EARS-format requirements** with full traceability
7. **Include ISO 26262 compliance** requirements for ASIL components
8. **Add environmental and interface** requirements from automotive standards

**Result**: Context-aware, fully traceable, standards-compliant requirements that fit perfectly into the existing project structure.

This specification enables AI agents to generate complete, scalable, standards-compliant automotive MBSE projects from simple user requests! 