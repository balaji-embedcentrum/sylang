{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Sylang Safety",
  "scopeName": "source.sylang.safety",
  "patterns": [
    { "include": "#comments" },
    { "include": "#imports" },
    { "include": "#def-statements" },
    { "include": "#section-headers" },
    { "include": "#safety-keywords" },
    { "include": "#property-keywords" },
    { "include": "#safety-levels" },
    { "include": "#strings" },
    { "include": "#identifiers" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.sylang",
          "begin": "//",
          "end": "$"
        },
        {
          "name": "comment.block.sylang",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "imports": {
      "patterns": [
        {
          "match": "\\b(use)\\s+(\\w+)\\s+([A-Za-z0-9_]+(?:\\.[A-Za-z0-9_]+,?\\s*)*)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.import.sylang"
            },
            "2": {
              "name": "storage.type.sylang"
            },
            "3": {
              "name": "entity.name.type.sylang"
            }
          }
        }
      ]
    },
    "def-statements": {
      "patterns": [
        {
          "match": "\\b(use|def)\\s+(item|scenario|condition|vehiclestate|drivingstate|environment|boundary|overallsafetystrategy|safetystrategy|principle|assumptionsofuse|foreseeablemisuse|goal|hazard|measure|criterion|hazardanalysis)\\b",
          "captures": {
            "1": { "name": "keyword.control.def.sylang" },
            "2": { "name": "entity.name.type.sylang" }
          }
        },
        {
          "name": "keyword.control.def.sylang",
          "match": "\\bdef\\b"
        }
      ]
    },
    "section-headers": {
      "patterns": [
        {
          "name": "keyword.control.section.sylang",
          "match": "^\\s*(operationalscenarios|operationalconditions|vehiclestates|driverstates|environments|safetyconcept|itemdef|hazardanalysis|riskassessment|safetygoals|safetymeasures|functionalsafetyrequirements)\\b"
        }
      ]
    },
    "safety-keywords": {
      "patterns": [
        {
          "name": "keyword.other.safety-structure.sylang",
          "match": "\\b(principle|assumption|misuse|includes|excludes|systemboundaries|subsystems)\\b"
        },
        {
          "name": "keyword.other.safety-reference.sylang",
          "match": "\\b(productline|systemfeatures|systemfunctions|vehiclestate|environment|driverstate|conditions)\\b"
        },
        {
          "name": "keyword.other.methodology.sylang",
          "match": "\\b(FMEA|HAZOP|STPA|FTA|ETA|HARA)\\b"
        }
      ]
    },
    "property-keywords": {
      "patterns": [
        {
          "name": "keyword.other.property.multi-word.sylang",
          "match": "\\b(enabledby\\s+function)\\b"
        },
        {
          "name": "keyword.other.property.sylang",
          "match": "\\b(name|description|owner|reviewers|tags|severity|probability|controllability|verification|rationale|methodology|context|conditions|consequences|characteristics|range|impact|standard|cause|effect|category|function|hazard|scenario|item|riskassessment|hazardidentification|mitigation|enabledby)\\b"
        }
      ]
    },
    "safety-levels": {
      "patterns": [
        {
          "name": "constant.language.safety-level.sylang",
          "match": "\\b(ASIL-[ABCD]|QM|[ABCD]|S[123]|E[1234]|C[123])\\b"
        },
        {
          "name": "keyword.other.safety.sylang",
          "match": "\\b(safetylevel|asil|mandatory|optional|alternative|or)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.sylang",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.sylang",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "entity.name.function.sylang",
          "match": "\\b[A-Z][A-Za-z0-9_]*\\b"
        },
        {
          "name": "variable.other.sylang",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
} 