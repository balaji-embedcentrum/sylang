{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Sylang Test",
  "scopeName": "source.sylang.test",
  "patterns": [
    { "include": "#comments" },
    { "include": "#imports" },
    { "include": "#def-statements" },
    { "include": "#section-headers" },
    { "include": "#test-keywords" },
    { "include": "#property-keywords" },
    { "include": "#test-enums" },
    { "include": "#cross-references" },
    { "include": "#strings" },
    { "include": "#identifiers" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.sylang",
          "begin": "//",
          "end": "$"
        },
        {
          "name": "comment.block.sylang",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "imports": {
      "patterns": [
        {
          "match": "\\b(use)\\s+(\\w+)\\s+([A-Za-z0-9_]+(?:\\.[A-Za-z0-9_]+,?\\s*)*)\\b",
          "captures": {
            "1": {
              "name": "keyword.control.import.sylang"
            },
            "2": {
              "name": "storage.type.sylang"
            },
            "3": {
              "name": "entity.name.type.sylang"
            }
          }
        }
      ]
    },
    "def-statements": {
      "patterns": [
        {
          "match": "\\b(def)\\s+(testsuite|testcase)\\s+([A-Za-z_][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": { "name": "keyword.control.def.sylang" },
            "2": { "name": "entity.name.type.sylang" },
            "3": { "name": "entity.name.function.sylang" }
          }
        },
        {
          "name": "keyword.control.def.sylang",
          "match": "\\bdef\\b"
        }
      ]
    },
    "section-headers": {
      "patterns": [
        {
          "name": "keyword.control.section.sylang",
          "match": "^\\s*(preconditions|teststeps|expectedresult|actualresult)\\b"
        }
      ]
    },
    "test-keywords": {
      "patterns": [
        {
          "name": "keyword.other.test-structure.sylang",
          "match": "\\b(testsuite|testcase|step)\\b"
        },
        {
          "name": "keyword.other.test-action.sylang",
          "match": "\\b(verifies\\s+requirement|exercises)\\b"
        },
        {
          "name": "keyword.other.test-verification.sylang",
          "match": "\\b(verifies|exercises)\\b"
        }
      ]
    },
    "property-keywords": {
      "patterns": [
        {
          "name": "keyword.other.property.multi-word.sylang",
          "match": "\\b(verifies\\s+requirement)\\b"
        },
        {
          "name": "keyword.other.property.sylang",
          "match": "\\b(name|description|owner|tags|testtype|coverage|method|priority|safetylevel|verifies|requirement|exercises|preconditions|teststeps|expectedresult|actualresult|testresult|executiontime)\\b"
        }
      ]
    },
    "test-enums": {
      "patterns": [
        {
          "name": "constant.language.test-type.sylang",
          "match": "\\b(unit|integration|system|acceptance|regression|smoke)\\b"
        },
        {
          "name": "constant.language.coverage-type.sylang",
          "match": "\\b(statement|branch|mcdc|requirement|function)\\b"
        },
        {
          "name": "constant.language.test-method.sylang",
          "match": "\\b(manual|automated|hil|sil|mil|pil)\\b"
        },
        {
          "name": "constant.language.test-result.sylang",
          "match": "\\b(pass|fail|pending|inconclusive)\\b"
        },
        {
          "name": "constant.language.priority.sylang",
          "match": "\\b(critical|high|medium|low)\\b"
        },
        {
          "name": "constant.language.safetylevel.sylang",
          "match": "\\b(ASIL-[ABCD]|QM)\\b"
        }
      ]
    },
    "cross-references": {
      "patterns": [
        {
          "name": "variable.other.reference.requirement.sylang",
          "match": "\\b(FSR_[A-Z0-9_]+|REQ_[A-Z0-9_]+|SG_[A-Z0-9_]+)\\b"
        },
        {
          "name": "variable.other.reference.function.sylang",
          "match": "\\b([A-Z][A-Za-z0-9_]*Function)\\b"
        },
        {
          "name": "variable.other.reference.step.sylang",
          "match": "\\b(STEP_[A-Z0-9_]+)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.sylang",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.sylang",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "entity.name.function.sylang",
          "match": "\\b[A-Z][A-Za-z0-9_]*\\b"
        },
        {
          "name": "variable.other.sylang",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
} 