# Windsurf Rules for platform-engineering

## Domain: Platform Engineering
Focus on Sylang files: .ple, .fml, .fun

## Critical Syntax Rules:
1. **`def` keyword**: Required for ALL definitions
2. **Unique Identifiers**: All identifiers must be unique across the ENTIRE PROJECT
3. **ISO26580 Compliance**: Features must comply with ISO26580 standards  
4. **Function-Feature Link**: Functions MUST use `enables` to reference features

## File Types & Syntax:

### .ple (Product Line) Files
**Keywords**: `def productline <UniqueIdentifier>`
**Required Properties**: name, description, owner, domain, compliance, firstrelease, tags, safetylevel, region
**Example**:
```
def productline AutomotiveInverter
  name "Automotive Electric Vehicle Inverter"
  description "High-performance automotive inverter system"
  owner "Power Electronics Team"
  domain "automotive", "electric-vehicle"
  compliance "ISO 26262", "ASPICE"
  firstrelease "2025-01-01"
  tags "inverter", "electric-vehicle"
  safetylevel ASIL-D
  region "Global", "Europe"
```

### .fml (Feature Model) Files
**Keywords**: `def systemfeatures <UniqueIdentifier>`, `def feature <UniqueIdentifier>`
**Modifiers**: mandatory, optional, or, alternative
**Required Properties**: name, description, owner, tags, safetylevel
**ISO26580 Compliance**: Required for all features
**Example**:
```
def systemfeatures InverterFeatures
  def feature InverterSystem mandatory
    name "Inverter System"
    description "Root feature for automotive inverter"
    owner "Power Electronics Team"
    tags "inverter", "root-feature"
    safetylevel ASIL-D
    
    def feature PowerConversion mandatory
      name "Power Conversion System"
      description "DC to AC power conversion"
      owner "Power Electronics Team"
      tags "power-conversion", "DC-AC"
      safetylevel ASIL-D
```

### .fun (Functions) Files
**Keywords**: `def systemfunctions <UniqueIdentifier>`, `def function <UniqueIdentifier>`
**Required Properties**: name, description, owner, tags, safetylevel, enables
**Critical**: Must use `enables` to reference feature identifiers
**Example**:
```
def systemfunctions InverterFunctions
  def function PowerElectronicsController
    name "Power Electronics Controller"
    description "Main controller for power electronics"
    owner "Power Electronics Team"
    tags "power-electronics", "controller"
    safetylevel ASIL-D
    enables InverterSystem, PowerConversion
```

## Validation Rules:
1. **Definitions**: ALL must start with `def` keyword
2. **Identifiers**: Must be unique across entire project
3. **Indentation**: 2 spaces per level
4. **Naming**: PascalCase for identifiers
5. **Strings**: Double quotes for all text
6. **Safety Levels**: ASIL-D, ASIL-C, ASIL-B, ASIL-A, QM
7. **Feature Standards**: Must comply with ISO26580
8. **Cross-References**: Functions must reference existing features with `enables`
9. **Required Properties**: All listed properties must be present

Generate code following these exact syntax patterns, ensuring unique identifiers and proper `enables` references.
