# Sylang .cursorrules for platform-engineering

You are an expert in platform engineering with deep knowledge of Sylang language for automotive/aerospace systems.

## Supported File Types: .ple, .fml, .fun

## Core Syntax Rules:
1. **`def` keyword**: Required for ALL definitions in Sylang
2. **Unique Identifiers**: All identifiers (ProductLineName, SystemName, FeatureName, FunctionName) must be unique across the ENTIRE PROJECT, not just within the file
3. **Cross-File References**: Identifiers can be referenced from any file in the project
4. **ISO26580 Compliance**: Features must comply with ISO26580 standards
5. **Function-Feature Relationship**: Functions MUST reference features using the `enables` keyword

### .ple (Product Line) Files

**Syntax Structure:**
```
def productline <UniqueProductLineIdentifier>
  name "<Display Name>"
  description "<Detailed description>"
  owner "<Team1>", "<Team2>"
  domain "<domain1>", "<domain2>"
  compliance "<Standard1>", "<Standard2>"
  firstrelease "<YYYY-MM-DD>"
  tags "<tag1>", "<tag2>", "<tag3>"
  safetylevel <ASIL-Level>
  region "<Region1>", "<Region2>"
```

**Example:**
```
def productline AutomotiveInverter
  name "Automotive Electric Vehicle Inverter"
  description "High-performance automotive inverter system"
  owner "Power Electronics Team", "Controls Team"
  domain "automotive", "electric-vehicle"
  compliance "ISO 26262", "ASPICE"
  firstrelease "2025-03-01"
  tags "inverter", "electric-vehicle", "ASIL-D"
  safetylevel ASIL-D
  region "Global", "Europe"
```

### .fml (Feature Model) Files

**Syntax Structure:**
```
def systemfeatures <UniqueSystemIdentifier>
  def feature <UniqueFeatureIdentifier> <mandatory|optional|or|alternative>
    name "<Display Name>"
    description "<Detailed description>"
    owner "<Team Name>"
    tags "<tag1>", "<tag2>"
    safetylevel <ASIL-Level>
    
    def feature <UniqueSubFeatureIdentifier> <mandatory|optional|or|alternative>
      name "<Sub Feature Name>"
      description "<Sub feature description>"
      owner "<Team Name>"
      tags "<tag1>", "<tag2>"
      safetylevel <ASIL-Level>
```

**Example:**
```
def systemfeatures InverterFeatures
  def feature InverterSystem mandatory
    name "Inverter System"
    description "Root feature for automotive inverter"
    owner "Power Electronics Team"
    tags "inverter", "root-feature"
    safetylevel ASIL-D
    
    def feature PowerConversion mandatory
      name "Power Conversion System"
      description "DC to AC power conversion"
      owner "Power Electronics Team"
      tags "power-conversion", "DC-AC"
      safetylevel ASIL-D
```

### .fun (Functions) Files

**Syntax Structure:**
```
def systemfunctions <UniqueSystemIdentifier>
  def function <UniqueFunctionIdentifier>
    name "<Display Name>"
    description "<Detailed description>"
    owner "<Team Name>"
    tags "<tag1>", "<tag2>"
    safetylevel <ASIL-Level>
    enables <UniqueFeatureIdentifier>, <AnotherFeatureIdentifier>
```

**Example:**
```
def systemfunctions InverterFunctions
  def function PowerElectronicsController
    name "Power Electronics Controller"
    description "Main controller for power electronics"
    owner "Power Electronics Team"
    tags "power-electronics", "controller"
    safetylevel ASIL-D
    enables InverterSystem, PowerConversion
```

## Validation Rules

### Syntax Requirements:
1. **Definitions**: ALL definitions must start with `def` keyword
2. **Unique Identifiers**: All identifiers must be unique across the entire project
3. **Indentation**: Use 2 spaces for each level
4. **Naming**: PascalCase for identifiers, descriptive names
5. **Strings**: Always use double quotes for string values
6. **Lists**: Comma-separated with quotes around each item
7. **Keywords**: Use exact keywords (mandatory, optional, or, alternative)

### Standards Compliance:
- **ISO26580**: Features must comply with ISO26580 standards
- **Safety Levels**: ASIL-D, ASIL-C, ASIL-B, ASIL-A, QM
- **Traceability**: Maintain cross-references between files

### Required Properties:
- **name**: Human-readable display name
- **description**: Detailed explanation
- **owner**: Team or person responsible
- **tags**: Comma-separated classification tags
- **safetylevel**: Must be valid ASIL level or QM

### Cross-Reference Rules:
- **Functions** MUST reference **Features** using the `enables` keyword
- **Feature identifiers** referenced in functions must exist in .fml files
- **All identifiers** must be unique across the entire project
- **Owner teams** should be consistent across files

### Grammar Validation:
1. All definitions must start with `def` keyword
2. Identifiers must be unique project-wide
3. Properties must be properly indented
4. String values must be quoted
5. Safety levels must be valid ASIL values
6. Features must comply with ISO26580 standards
7. Functions must use `enables` to reference features
8. Hierarchical features must be properly nested
9. No trailing commas in lists
10. Consistent team naming across files

When generating or modifying these files, ensure proper syntax, unique identifiers, required properties, and valid cross-references with `enables` keyword.
