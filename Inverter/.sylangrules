# SYLANG LANGUAGE SPECIFICATION
# Complete Grammar and Syntax Rules for AI Code Generation
# Version 1.0.60 - January 2025

## OVERVIEW
Sylang is a family of domain-specific languages for Model Based Systems Engineering (MBSE) in safety-critical industries (Automotive, Aerospace, Medical). This specification covers all 22+ file extensions with complete syntax, validation rules, and examples.

## UNIVERSAL SYNTAX RULES

### 1. INDENTATION
- **CRITICAL**: Exactly 2 spaces per indentation level, NO TABS
- Consistent hierarchy: child elements exactly one level deeper than parent
- NO mixing of tabs and spaces

### 2. COMMENTS
```sylang
// Single-line comment
/* Multi-line
   comment */
```

### 3. STRING LITERALS
- Always use double quotes: `"This is a string"`
- Escape sequences: `"Line 1\nLine 2"`
- Multi-value lists: `"value1", "value2", "value3"`

### 4. IDENTIFIERS
- **PascalCase**: Start with uppercase letter (ElectricParkingBrakeSystem, TestCase_001)
- **ALL_CAPS**: For step IDs (STEP_001, STEP_002)
- **Valid characters**: Letters, numbers, underscores
- **Pattern**: `^[A-Z][A-Za-z0-9_]*$`

### 5. SAFETY LEVELS
- **Unquoted keywords**: `ASIL-A`, `ASIL-B`, `ASIL-C`, `ASIL-D`, `QM`
- **Simplified format**: `A`, `B`, `C`, `D`, `QM`

### 6. IMPORTS (ALL FILES)
```sylang
use productline MyProductLine
use featureset MyFeatures  
use functiongroup MyFunctions, HisFunctions
use reqsection MyRequirements, YourRequirements, SomeoneElse's
use safetygoals MySafetyGoals
```

### 7. CORE PROPERTIES (ALL DEFINITIONS)
```sylang
name "Human-readable display name"
description "Detailed description of purpose and scope"
owner "Responsible team or person"
tags "tag1", "tag2", "tag3"
safetylevel ASIL-C
```

## FILE EXTENSIONS AND SPECIFICATIONS

### 1. PRODUCT LINE ENGINEERING (.ple)

**Purpose**: Define product line architecture and metadata
**Top-level keyword**: `productline`
**File limit**: ONE per workspace

**Complete Syntax**:
```sylang
productline ProductLineName
  name "Product Line Display Name"
  description "Product line purpose and scope"
  owner "Systems Engineering Team"
  domain "automotive", "safety-critical"
  compliance "ISO 26262", "ASPICE", "DO-178C"
  firstrelease "2025-01-01"
  tags "product", "safety", "automotive"
  safetylevel ASIL-D
  region "Global", "Europe", "North America"
```

**Required Properties**: name, description, owner, domain, compliance, firstrelease, safetylevel
**Property Order**: name → description → owner → domain → compliance → firstrelease → tags → safetylevel → region
**Validation**: Single productline per file, valid date format (YYYY-MM-DD), valid safety levels

### 2. FEATURE MODELING (.fml)

**Purpose**: Define feature models and variability
**Top-level keyword**: `featureset`
**File limit**: ONE per workspace

**Complete Syntax**:
```sylang
def featureset FeatureSetName
  name "Feature Set Display Name"
  description "Feature model description"
  owner "Product Management"
  tags "features", "variability"
  safetylevel ASIL-C

  def feature RootFeature mandatory
    name "Root Feature"
    description "Top-level feature"
    owner "Systems Engineering"
    tags "root", "mandatory"
    safetylevel ASIL-C

    def feature SubFeature1 optional
      name "Optional Sub-Feature"
      description "Optional feature description"
      owner "Feature Team"
      tags "optional"
      safetylevel ASIL-B

    def feature AlternativeGroup mandatory
      name "Alternative Feature Group"
      description "Exactly one must be selected"
      
      def feature Alternative1 alternative
        name "Alternative Option 1"
        
      def feature Alternative2 alternative
        name "Alternative Option 2"

    def feature OrGroup optional
      name "Or Feature Group"
      description "One or more can be selected"
      
      def feature OrOption1 or
        name "Or Option 1"
        
      def feature OrOption2 or
        name "Or Option 2"
```

**Variability Types**:
- `mandatory`: Required feature (must be included)
- `optional`: Optional feature (may be included)
- `alternative`: Exactly one from group must be selected
- `or`: One or more from group can be selected
- if a sibling is mandatory or optional - then all siblings can be mandatory or optional only
- if a sibling is or - then all sibling are or only
- if a sibling is alternative - then all siblings are alternative only

**Validation**: Consistent variability types within groups, proper nesting, unique identifiers

### 3. FUNCTION DEFINITIONS (.fun)

**Purpose**: Define system functions and their relationships
**Top-level keyword**: `functiongroup`
**File limit**: ONE per workspace

**Complete Syntax**:
```sylang
use featureset MyFeatures

def functiongroup FunctionGroupName
  name "Function Group Display Name"
  description "Function group purpose"
  owner "Systems Engineering"
  tags "functions", "system"
  safetylevel ASIL-C

  def function CoreFunction
    name "Core System Function"
    description "Primary system function"
    owner "Development Team"
    tags "core", "critical"
    safetylevel ASIL-D
    category "control"
    enables feature FeatureA, FeatureB
    partof subsystem
    allocatedto ComponentName

  def function SafetyFunction
    name "Safety Monitoring Function"
    description "Monitors system safety"
    owner "Safety Team"
    tags "safety", "monitoring"
    safetylevel ASIL-C
    category "safety"
    enables feature SafetyFeature
```

**Required Properties**: name, description, owner, enables feature
**Cross-references**: Must reference valid features (requires use featureset)
**Categories**: control, safety, diagnostic, communication, user-interface, power, thermal
**Validation**: Import-aware feature validation, unique function names

### 4. SAFETY GOALS (.sgl)

**Purpose**: Define high-level safety objectives
**Top-level keyword**: `safetygoals`

**Complete Syntax**:
```sylang
use productline MyProductLine
use functiongroup MyFunctions

def safetygoals SafetyGoalsName
  name "Safety Goals Collection"
  description "System safety goals"
  owner "Safety Engineering"
  productline MyProductLine
  functiongroup MyFunctions
  tags "safety", "goals"
  
  def goal SG_001
    name "Prevent Unintended Activation"
    description "System shall not activate without explicit user command"
    owner "Safety Team"
    tags "activation", "safety"
    safetylevel ASIL-C
    allocatedto ComponentA, ComponentB
    derivedfrom HighLevelRequirement
    
    def measure SM_001
      name "Safety Measure 001"
      description "Implement redundant activation confirmation"
      enabledby function SafetyFunction
      
    def criterion VC_001
      name "Verification Criterion 001"
      description "Test unintended activation scenarios"
      method "Hardware-in-the-loop testing"
      coverage "All operational scenarios"
```

**Required Properties**: name, description, safetylevel, allocatedto
**Structure**: goal → measure → criterion hierarchy
**Cross-references**: functions, components, requirements
**Validation**: Valid safety levels, existing function references

### 5. HAZARD ANALYSIS (.haz)

**Purpose**: Systematic hazard identification and analysis
**Top-level keyword**: `hazardidentification`

**Complete Syntax**:
```sylang
use productline MyProductLine
use functiongroup MyFunctions

def hazardidentification HazardAnalysisName
  name "System Hazard Analysis"
  description "Comprehensive hazard identification"
  owner "Safety Engineering"
  methodology "FMEA", "HAZOP", "STPA"
  productline MyProductLine
  functiongroup MyFunctions
  
  def hazard H_001
    name "Power Supply Failure"
    description "Loss of electrical power to critical systems"
    category "electrical"
    cause "Component failure, wiring fault, power source loss"
    effect "System shutdown, loss of functionality"
    functions_affected CoreFunction, MonitoringFunction
    context "All operational modes"
    conditions "Normal operation, degraded operation"
    consequences "System unavailable, potential safety risk"
    
  def hazard H_002
    name "Communication Bus Failure"
    description "Loss of communication between components"
    category "communication"
    cause "Bus fault, component failure, EMI interference"
    effect "Degraded system performance"
    functions_affected CommunicationFunction
```

**Categories**: electrical, mechanical, software, communication, thermal, hydraulic
**Methodologies**: FMEA, HAZOP, STPA, FTA, ETA
**Required Properties**: name, description, category, cause, effect
**Validation**: Valid categories, function references

### 6. RISK ASSESSMENT (.rsk)

**Purpose**: S×E×C methodology and ASIL determination
**Top-level keyword**: `riskassessment`

**Complete Syntax**:
```sylang
use hazardidentification MyHazards

def riskassessment RiskAssessmentName
  name "System Risk Assessment"
  description "ISO 26262 compliant risk assessment"
  owner "Safety Engineering"
  methodology "S×E×C"
  hazardanalysis MyHazards
  
  def risk R_001
    name "Power Supply Failure Risk"
    description "Risk assessment for power supply failure"
    hazard H_001
    severity S2
    exposure E3
    controllability C2
    safetylevel ASIL-B
    rationale "Moderate injury potential with high exposure"
    scenario "Vehicle in highway operation"
    
  def risk R_002
    name "Communication Failure Risk"
    description "Risk assessment for communication failure"
    hazard H_002
    severity S1
    exposure E2
    controllability C3
    safetylevel QM
    rationale "Low severity with good controllability"
```

**Severity Levels**: S0, S1, S2, S3 (No injury → Life-threatening)
**Exposure Levels**: E0, E1, E2, E3, E4 (Very rare → Very frequent)
**Controllability**: C0, C1, C2, C3 (Controllable → Uncontrollable)
**ASIL Determination**: QM, ASIL-A, ASIL-B, ASIL-C, ASIL-D
**Required Properties**: hazard, severity, exposure, controllability, safetylevel


### 7. SAFETY ITEMS (.itm)

**Purpose**: Safety items and operational scenarios (HARA)
**Top-level keyword**: `item`

**Complete Syntax**:
```sylang
use productline MyProductLine
use featureset MyFeatures
use functiongroup MyFunctions

def item ItemName
  name "Safety Item Name"
  description "Item being analyzed"
  owner "Safety Team"
  reviewers "Safety Engineering", "Systems Engineering"
  productline MyProductLine
  featureset MyFeatures
  functiongroup MyFunctions
  
  blocks
    BlockA
    BlockB
    
  systemboundaries
    includes
      def boundary BOUND_001
        description "Included system elements"
    excludes
      def boundary BOUND_002
        description "Excluded system elements"

operationalscenarios
  def scenario SCEN_001
    description "Normal operation scenario"
    vehiclestate OperationalState
    environment NormalConditions
    driverstate AlertDriver

vehiclestates
  def vehiclestate OperationalState
    description "Vehicle in normal operation"
    characteristics "Speed 0-120 km/h, all systems active"

safetyconcept
  def overallsafetystrategy STRATEGY_001
    principle PRIN_001 "Fail-safe design principle"
    
  def assumptionsofuse ASSUMP_001
    assumption ASSUMP_001 "Driver remains alert and capable"
```

**Required Sections**: operationalscenarios, vehiclestates, safetyconcept
**Validation**: Complete HARA structure, valid cross-references

### 8. REQUIREMENTS (.req)
**Purpose**: Requirements specifications and traceability
**Top-level keyword**: `reqsection`

**Complete Syntax**:
```sylang
reqsection RequirementSection
  name "Requirements Section"
  description "Collection of related requirements"
  owner "Requirements Team"
  
  def requirement REQ_001
    name "Power Supply Requirement"
    description "System shall operate with 12V ±10% power supply"
    type functional
    source stakeholder
    derivedfrom HighLevelReq
    allocatedto PowerSupplyComponent
    safetylevel ASIL-B
    rationale "Required for reliable operation"
    verificationcriteria "Power supply testing per test specification"
    status approved
```

**Requirement Types**: functional, non-functional, performance, safety
**Sources**: stakeholder, internal, supplier, customer, standards, legal
**Status Values**: draft, review, approved

### 9. BLOCKS (.blk)

**Purpose**: System/component block definitions with ports
**Top-level keyword**: `block`

**Complete Syntax**:
```sylang
use functiongroup MyFunctions
use featureset MyFeatures

def block system SystemName
  name "System Block Name"
  description "System functionality"
  owner "Systems Team"
  tags "system", "top-level"
  safetylevel ASIL-C
  contains BlockA, BlockB
  enables feature FeatureA, FeatureB
  implements FunctionA, FunctionB
  
  port in RequiredPortA, RequiredPortB
  
  def port out ProvidedPort
    name "Provided Port Name"
    description "Port functionality"
    type electrical
    owner "Port Team"
    safetylevel ASIL-C
    tags "power", "electrical"

```

**Block Types**: system, subsystem, component, subcomponent, module, submodule, unit, subunit, assembly, subassembly, circuit, part
**Port Types**: electrical, mechanical, data, CAN, Ethernet, hydraulic, pneumatic, optical, thermal, audio, RF, sensor, actuator
**Port Directions**: `port in` (required), `def port out` (provided)

### 10. TEST CASE FILES (.tst)

**Purpose**: Test case specifications and execution
**Top-level keyword**: `testsuite`

**Complete Syntax**:
```sylang
use functiongroup MyFunctions
use requirements MyRequirements
use safetygoals MySafetyGoals

def testsuite TestSuiteName
  name "Test Suite Display Name"
  description "Test suite purpose and scope"
  owner "Test Team"
  tags "integration", "safety", "validation"
  testtype integration
  safetylevel ASIL-C
  coverage mcdc
  method hil
  
  def testcase TC_001
    name "Test Case Name"
    description "Test case objective"
    priority critical
    safetylevel ASIL-C
    method hil
    verifies requirement REQ_001, REQ_002
    exercises FunctionA, FunctionB
    
    preconditions
      "System initialized and operational"
      "Test environment configured"
      "All prerequisites met"
      
    teststeps
      step STEP_001 "Initialize test setup"
      step STEP_002 "Execute test scenario"
      step STEP_003 "Verify expected behavior"
      step STEP_004 "Clean up test environment"
      
    expectedresult "System responds within specification limits"
    testresult pass
    actualresult "Test executed successfully with expected results"
    executiontime "2023-12-15T10:30:00Z"
```

**Test Types**: unit, integration, system, acceptance, regression, smoke
**Coverage Types**: statement, branch, mcdc, requirement, function
**Test Methods**: manual, automated, hil, sil, mil, pil
**Priority Levels**: critical, high, medium, low
**Test Results**: pass, fail, pending, inconclusive
**Step Format**: `step STEP_ID "description"` (ID in ALL_CAPS)

## VALIDATION RULES

### 1. UNIVERSAL RULES
- All definitions must start with `def` keyword
- Unique identifiers across project scope
- Required properties must be present
- Safety levels must be valid (QM, A, B, C, D, ASIL-A, ASIL-B, ASIL-C, ASIL-D)
- Exactly 2 spaces indentation, no tabs
- String values in double quotes

### 2. FILE-SPECIFIC RULES
- One top-level definition per file (.ple, .fml, .fun)
- Cross-file references require import statements
- Identifier naming conventions (PascalCase)
- Property ordering where specified
- Enum value validation

### 3. CROSS-FILE DEPENDENCIES
- `use` statements must precede definitions
- Referenced symbols must exist or be imported
- Import-aware validation prevents undefined references
- Circular dependencies not allowed

## BEST PRACTICES

### 1. NAMING CONVENTIONS
- **Files**: descriptive, lowercase with extensions
- **Identifiers**: PascalCase, descriptive names
- **Requirements**: REQ_, SG_ prefixes
- **Test Cases**: TC_ prefix with numbers
- **Steps**: STEP_ prefix with zero-padded numbers

### 2. SAFETY COMPLIANCE
- Always specify ASIL levels for safety-critical items
- Maintain traceability from goals to requirements to tests
- Document safety rationale and verification methods
- Use appropriate safety levels for components

### 3. STRUCTURE ORGANIZATION
- Group related items logically
- Use consistent indentation and formatting
- Provide meaningful descriptions
- Maintain clear ownership assignments

### 4. CROSS-REFERENCES
- Import all dependencies explicitly
- Use descriptive identifiers for references
- Maintain bidirectional traceability
- Validate all cross-file references

## EXAMPLE COMPLETE PROJECT STRUCTURE

```
project/
├── ProductLine.ple          # Product line definition
├── Features.fml             # Feature model
├── Functions.fun            # System functions
├── SafetyGoals.sgl         # Safety objectives
├── HazardAnalysis.haz      # Hazard identification
├── RiskAssessment.rsk      # Risk analysis
├── Requirements.req         # Requirements specifications
├── SafetyItems.itm         # Safety items and scenarios
├── SystemArchitecture.blk  # System blocks
├── TestSuite.tst           # Test cases
└── subsystems/
    ├── PowerSubsystem.blk
    ├── ControlSubsystem.blk
    └── SafetySubsystem.blk
```

This specification enables AI to generate complete, validated, and standards-compliant Sylang code across all domains and file types. 